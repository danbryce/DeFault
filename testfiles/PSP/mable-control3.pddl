(define (domain mable-control)
 (:predicates
   (LESSON ?l)
   (TEMPLATE ?t)
   (NIMDIMENSION ?n) ;nimDimension 
   (TARGETCONCEPT ?tc)
   (TARGETCONCEPTTYPECODE ?tc)
   (TARGETCONCEPTTYPESYNTAX ?tc)
   (STRATEGY ?s)
   (CODE ?c)
   (SYNTAX ?s)
   (CONCEPTDIMENSION ?c)
   
   (newDefCode ?c)
   (newDefSyntax ?s)
   (defCodeForTarget ?c ?tc)
   (defSyntaxForTarget ?s ?tc)
   (lessonNIMDIMENSION ?l ?n)
   (targetCONCEPTDIMENSION ?tc ?d)
   (strategyNIMDIMENSION ?s ?n)
   (strategyCONCEPTDIMENSION ?c ?n)
   (lessonMessagesInTemplate ?l ?t)
   (templateHasLesson ?t)
 
   (nimDimensionInTemplate ?n ?t)
   (conceptDimensionInTemplate ?c ?t)
   (targetInTemplate ?tc ?t)
 
   (templateHasNIMDIMENSION ?t)
   (templateHasCONCEPTDIMENSION ?t)
   
   (composedOf ?tc ?tc1)
 
   (templateHasTarget ?t)
   (templateComplete ?t)
   (templateHasNoNIMDIMENSION ?t)
   (templateHasNoCONCEPTDIMENSION ?t)
   (codeStrategy ?s)
   (syntaxStrategy ?s)
   (untried ?s ?tc) ;;indicates if tried strategy on target !!Not contextual, need to generalize!!
 )
  
   
  
  
  (:action invokeCodeStrategyOnTemplate
   :parameters (?s ?t ?n ?cd ?c ?tc ?sc)
   :precondition (and (STRATEGY ?s)
   					  (TEMPLATE ?t)
   					  (NIMDIMENSION ?n)
   					  (CONCEPTDIMENSION ?cd)
   					  (TARGETCONCEPT ?tc)
   					  ;;(TARGETCONCEPTTYPECODE ?tc)
   					  (SYNTAX ?sc)
   					  (CODE ?c)
   					  (codeStrategy ?s)					  
   					  ;;(templateComplete ?t)
   					  (nimDimensionInTemplate ?n ?t)
   					  (strategyNIMDIMENSION ?s ?n)
   					  (conceptDimensionInTemplate ?cd ?t)
   					  (strategyCONCEPTDIMENSION ?s ?cd)
   					  (newDefCode ?c)
   					  (defSyntaxForTarget ?sc ?tc) 
   					  (untried ?s ?tc)  					     					  
   					  )
   :effect (and (defCodeForTarget ?c ?tc)
   				(not (newDefCode ?c))
   				)
   )
   
   (:action invokeSyntaxStrategyOnTemplate
   :parameters (?s ?t ?n ?cd ?c ?tc)
   :precondition (and (STRATEGY ?s)
   					  (TEMPLATE ?t)
   					  (NIMDIMENSION ?n)
   					  (CONCEPTDIMENSION ?cd)
   					  (SYNTAX ?c) ;;
   					  (TARGETCONCEPT ?tc)
   					  ;;(TARGETCONCEPTTYPESYNTAX ?tc)
   					  (syntaxStrategy ?s)
   					  ;;(templateComplete ?t)
   					  (nimDimensionInTemplate ?n ?t)
   					  (strategyNIMDIMENSION ?s ?n)
   					  (conceptDimensionInTemplate ?cd ?t)
  					  (strategyCONCEPTDIMENSION ?s ?cd)
   					  (newDefSyntax ?c)
   					  (untried ?s ?tc)
   					  )
   :effect (and (defSyntaxForTarget ?c ?tc)
   				(not (newDefSyntax ?c))
   				)
   )

   (:action invokeSyntaxAndCodeStrategyOnTemplate
   :parameters (?s ?t ?n ?cd ?c1 ?c2 ?tc)
   :precondition (and (STRATEGY ?s)
   					  (TEMPLATE ?t)
   					  (NIMDIMENSION ?n)
   					  (CONCEPTDIMENSION ?cd)
   					  (SYNTAX ?c1) 
   					  (CODE ?c2)
   					  (TARGETCONCEPT ?tc)
   					  (syntaxStrategy ?s)
   					  (codeStrategy ?s)			  
   					  (nimDimensionInTemplate ?n ?t)
   					  (strategyNIMDIMENSION ?s ?n)
   					  (conceptDimensionInTemplate ?cd ?t)
  					  (strategyCONCEPTDIMENSION ?s ?cd)
   					  (newDefSyntax ?c1)
   					  (newDefCode ?c2)
   					  (untried ?s ?tc)
   					  )
   :effect (and (defSyntaxForTarget ?c1 ?tc)
   				(not (newDefSyntax ?c1))
   				(defCodeForTarget ?c2 ?tc)
   				(not (newDefCode ?c2))
   				)
   )
)
