(define (domain mable-control)
; (:constants TC_SYNTAX TC_CODE)
 (:predicates
   (LESSON ?l)
   (TEMPLATE ?t)
   (NIM ?n)
   (TARGETCONCEPT ?tc)
   (TARGETCONCEPTTYPECODE ?tc)
   (TARGETCONCEPTTYPESYNTAX ?tc)
   (STRATEGY ?s)
   (CODE ?c)
   (SYNTAX ?s)
   
   (newDefCode ?c)
   (newDefSyntax ?s)
   (defCodeForTarget ?c ?tc)
   (defSyntaxForTarget ?s ?tc)
   (lessonNIM ?l ?n)
   (strategyNIM ?s ?n)
   (lessonMessagesInTemplate ?l ?t)
   (templateHasLesson ?t)
   (nimInTemplate ?n ?t)
   (templateHasNIM ?t)
   (targetInTemplate ?tc ?t)
   (templateHasTarget ?t)
   (templateComplete ?t)
   (templateHasNoNIM ?t)
   (codeStrategy ?s)
   (syntaxStrategy ?s)
 )
  
  (:action addLessonMessagesToTemplate
   :parameters (?l ?t)
   :precondition (and (LESSON ?l) 
   					  (TEMPLATE ?t)
   					  )
   :effect (and (lessonMessagesInTemplate ?l ?t)
   				(templateHasLesson ?t)
   				)
  )
  
  (:action addNIMToTemplate
   :parameters (?n ?l ?t)
   :precondition (and (TEMPLATE ?t)
   					  (LESSON ?l)
   					  (NIM ?n)
   					  (lessonNIM ?l ?n)
   					  (lessonMessagesInTemplate ?l ?t)
   					  (templateHasNoNIM ?t)
   					  )
   :effect (and (nimInTemplate ?n ?t)
   				(templateHasNIM ?t)
   				(not (templateHasNoNIM ?t))
   				)
  )
  
  (:action addTargetConceptToTemplate
   :parameters (?tc ?t)
   :precondition (and (TARGETCONCEPT ?tc)
   					  (TEMPLATE ?t)
   					  )
   :effect (and (targetInTemplate ?tc ?t)
   				(templateHasTarget ?t)
   				)
   )
   

   (:action completeTemplate
    :parameters (?t)
    :precondition (and (TEMPLATE ?t)
    				   (templateHasTarget ?t)
    				   (templateHasLesson ?t)
    				   (templateHasNIM ?t)
    				  
    				   )
    :effect (templateComplete ?t)
    )
  
  
  
  (:action invokeCodeStrategyOnTemplate
   :parameters (?s ?t ?n ?c ?tc ?sc)
   :precondition (and (STRATEGY ?s)
   					  (TEMPLATE ?t)
   					  (NIM ?n)
   					  (TARGETCONCEPT ?tc)
   					  (TARGETCONCEPTTYPECODE ?tc)
   					  (SYNTAX ?sc)
   					  (CODE ?c)
   					  (codeStrategy ?s)					  
   					  (templateComplete ?t)
   					  (nimInTemplate ?n ?t)
   					  (strategyNIM ?s ?n)
   					  (newDefCode ?c)
   					  (defSyntaxForTarget ?sc ?tc)   					     					  
   					  )
   :effect (and (defCodeForTarget ?c ?tc)
   				(not (newDefCode ?c))
   				)
   )
   
   (:action invokeSyntaxStrategyOnTemplate
   :parameters (?s ?t ?n ?c ?tc)
   :precondition (and (STRATEGY ?s)
   					  (TEMPLATE ?t)
   					  (NIM ?n)
   					  (SYNTAX ?c)
   					  (TARGETCONCEPT ?tc)
   					  (TARGETCONCEPTTYPESYNTAX ?tc)
   					  (syntaxStrategy ?s)
   					  (templateComplete ?t)
   					  (nimInTemplate ?n ?t)
   					  (strategyNIM ?s ?n)
   					  (newDefSyntax ?c)
   					  )
   :effect (and (defSyntaxForTarget ?c ?tc)
   				(not (newDefSyntax ?c))
   				)
   )
)
