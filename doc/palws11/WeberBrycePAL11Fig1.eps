%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: example.pdf
%%Creator: Adobe Acrobat 8.0
%%For: danbryce
%%CreationDate: 5/16/11, 10:16:33 AM
%%BoundingBox: 0 0 864 216
%%HiResBoundingBox: 0 0 864 216
%%CropBox: 0 0 864 216
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.30 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.30 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}				if				end		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:08:23">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2011-05-16T16:16:05Z"
   xap:CreatorTool="Microsoft PowerPoint"
   xap:ModifyDate="2011-05-16T16:16:05Z"
   dc:format="application/pdf"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.6.7 Quartz PDFContext">
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Daniel Bryce</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">example.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (20090225112611) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (Generic RGB Profile) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright 2007 Apple Inc., all rights reserved.) put
dup /ProfileID <00129715A9684F7FFA6F922676295A99> put
dup /DecodeABC [
{{0 0.00012 0.00024 0.00037 0.00056 0.00084 0.00116 0.00153 0.00195 0.00241
0.00291 0.00346 0.00404 0.00467 0.00534 0.00604 0.00679 0.00757 0.00839 0.00925
0.01014 0.01107 0.01204 0.01305 0.01408 0.01516 0.01627 0.01741 0.01859 0.0198
0.02105 0.02233 0.02364 0.02499 0.02637 0.02779 0.02923 0.03071 0.03222 0.03376
0.03534 0.03695 0.03858 0.04025 0.04195 0.04369 0.04545 0.04725 0.04907 0.05093
0.05282 0.05473 0.05668 0.05866 0.06067 0.0627 0.06477 0.06687 0.069 0.07115
0.07334 0.07556 0.0778 0.08008 0.08238 0.08471 0.08707 0.08946 0.09188 0.09433
0.09681 0.09931 0.10184 0.10441 0.107 0.10961 0.11226 0.11493 0.11763 0.12036
0.12312 0.12591 0.12872 0.13156 0.13443 0.13732 0.14025 0.1432 0.14618 0.14918
0.15221 0.15527 0.15836 0.16147 0.16461 0.16778 0.17097 0.17419 0.17744 0.18071
0.18401 0.18734 0.19069 0.19407 0.19748 0.20091 0.20437 0.20786 0.21137 0.2149
0.21847 0.22206 0.22567 0.22931 0.23298 0.23668 0.24039 0.24414 0.24791 0.25171
0.25553 0.25937 0.26325 0.26715 0.27107 0.27502 0.27899 0.28299 0.28702 0.29107
0.29515 0.29925 0.30337 0.30752 0.3117 0.3159 0.32013 0.32438 0.32866 0.33296
0.33728 0.34163 0.34601 0.35041 0.35483 0.35928 0.36376 0.36826 0.37278 0.37733
0.3819 0.3865 0.39112 0.39577 0.40044 0.40513 0.40985 0.41459 0.41936 0.42415
0.42897 0.43381 0.43867 0.44356 0.44847 0.45341 0.45837 0.46335 0.46836 0.47339
0.47845 0.48353 0.48864 0.49376 0.49891 0.50409 0.50929 0.51451 0.51976 0.52503
0.53032 0.53564 0.54098 0.54634 0.55173 0.55714 0.56258 0.56804 0.57352 0.57902
0.58455 0.5901 0.59568 0.60128 0.6069 0.61255 0.61821 0.62391 0.62962 0.63536
0.64112 0.6469 0.65271 0.65854 0.66439 0.67027 0.67617 0.68209 0.68804 0.69401
0.7 0.70601 0.71205 0.71811 0.72419 0.73029 0.73642 0.74257 0.74875 0.75494
0.76116 0.7674 0.77367 0.77996 0.78627 0.7926 0.79895 0.80533 0.81173 0.81815
0.8246 0.83106 0.83755 0.84407 0.8506 0.85716 0.86374 0.87034 0.87696 0.88361
0.89028 0.89697 0.90368 0.91042 0.91718 0.92396 0.93076 0.93758 0.94443 0.9513
0.95819 0.9651 0.97204 0.979 0.98598 0.99298 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2271318629 0.1209582666 0.0074446125
0.1766598109 0.3368200198 0.0453083998
0.078317123 0.0422293431 0.3597059791
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
<< /1 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216 li
864 216 li
864 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 216 mo
864 216 li
864 0 li
0 0 li
cp
clp
0 216 mo
864 216 li
864 0 li
0 0 li
cp
false sop
<< /2 
/CIEBasedDEFG /ColorSpaceFamily resourcestatus
{pop pop false} {true} ifelse
{[/DeviceCMYK]}
{[/CIEBasedDEFG 20 dict
dup /CreationDate (20001130011231) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (Acrobat 5 Reader CMYK) put
dup /ColorSpace (CMYK) put
dup /Copyright (Copyright 2000 Adobe Systems, Inc.) put
dup /ProfileID <7FD780FF6943CB79EC9682CDA106A79A> put
dup /DecodeDEFG [
{{0 0.00778 0.01528 0.02212 0.02828 0.03389 0.0391 0.04426 0.04952 0.05439
0.05866 0.0629 0.06772 0.07295 0.07783 0.08208 0.08603 0.08996 0.09415 0.09896
0.10418 0.10908 0.11335 0.11732 0.1215 0.12629 0.13151 0.13642 0.1407 0.14465
0.14856 0.15249 0.15665 0.16142 0.16664 0.17157 0.17587 0.17983 0.18373 0.18766
0.19181 0.19656 0.20177 0.20672 0.21103 0.215 0.2189 0.22281 0.22673 0.23087
0.23559 0.2408 0.24578 0.25011 0.25408 0.25798 0.26189 0.26579 0.2697 0.27362
0.27774 0.28243 0.28763 0.29263 0.29699 0.30096 0.30487 0.30878 0.31268 0.31659
0.32051 0.32461 0.32928 0.33447 0.33949 0.34387 0.34785 0.35176 0.35567 0.35957
0.36348 0.36739 0.37129 0.3752 0.37911 0.3832 0.38783 0.393 0.39805 0.40247
0.40646 0.41037 0.41428 0.41818 0.42209 0.426 0.4299 0.43381 0.43771 0.44162
0.44553 0.44943 0.45334 0.45725 0.46115 0.46506 0.46896 0.47287 0.47678 0.48068
0.48459 0.4885 0.4924 0.49631 0.50021 0.50412 0.50803 0.51193 0.51584 0.51975
0.52365 0.52756 0.53146 0.53537 0.53928 0.54318 0.54709 0.551 0.5549 0.55881
0.56271 0.56662 0.57053 0.57443 0.57834 0.58224 0.58603 0.58935 0.59206 0.59473
0.598 0.60177 0.60567 0.60957 0.61348 0.61739 0.62129 0.6252 0.62911 0.63301
0.63692 0.64072 0.64408 0.64681 0.64946 0.65269 0.65644 0.66034 0.66425 0.66815
0.67206 0.67597 0.67987 0.68378 0.68768 0.6915 0.69489 0.69765 0.70029 0.70348
0.70721 0.71111 0.71501 0.71892 0.72283 0.72673 0.73064 0.73454 0.73837 0.74179
0.74458 0.7472 0.75036 0.75407 0.75797 0.76187 0.76578 0.76968 0.77359 0.7775
0.7814 0.78524 0.78869 0.7915 0.79412 0.79724 0.80093 0.80483 0.80873 0.81264
0.81654 0.82045 0.82429 0.82777 0.83061 0.83321 0.83631 0.83998 0.84387 0.84778
0.85169 0.85559 0.85944 0.86294 0.8658 0.8684 0.87147 0.87512 0.87901 0.88292
0.88678 0.89029 0.89317 0.89576 0.89881 0.90246 0.90634 0.9102 0.91373 0.91663
0.91922 0.92225 0.92588 0.92972 0.93326 0.93617 0.93876 0.94178 0.9454 0.94924
0.9528 0.95572 0.95831 0.96131 0.96492 0.96876 0.97233 0.97526 0.97785 0.9808
0.98407 0.98699 0.98954 0.99219 0.99483 0.99736 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00743 0.01399 0.01952 0.02471 0.02997 0.03484 0.03907 0.04301 0.04692
0.05083 0.05473 0.05864 0.06255 0.06645 0.07036 0.07426 0.07817 0.08208 0.08598
0.08989 0.0938 0.0977 0.10161 0.10551 0.10942 0.11333 0.11723 0.12114 0.12505
0.12895 0.13286 0.13676 0.14067 0.14458 0.14846 0.15212 0.15517 0.15777 0.16064
0.16415 0.168 0.17191 0.17581 0.17972 0.18362 0.18753 0.19144 0.19534 0.19925
0.20316 0.20706 0.21097 0.21487 0.21878 0.22269 0.22659 0.2305 0.23441 0.23831
0.24222 0.24612 0.25003 0.25394 0.25784 0.26175 0.26566 0.26956 0.27347 0.27737
0.28128 0.28519 0.28909 0.293 0.29691 0.30081 0.30472 0.30862 0.31253 0.31645
0.32054 0.32518 0.33036 0.3354 0.3398 0.34379 0.3477 0.35161 0.35551 0.35942
0.36333 0.36723 0.37114 0.37505 0.37895 0.38286 0.38676 0.39067 0.39458 0.39848
0.40239 0.4063 0.4102 0.41411 0.41801 0.42176 0.425 0.42766 0.43039 0.43373
0.43753 0.44144 0.44534 0.44925 0.45316 0.45706 0.46097 0.46487 0.46878 0.47269
0.47659 0.4805 0.48441 0.48831 0.49222 0.49612 0.50003 0.50394 0.50784 0.51175
0.51553 0.51883 0.52153 0.52421 0.5275 0.53127 0.53517 0.53908 0.54298 0.54689
0.5508 0.5547 0.55861 0.56251 0.56631 0.56965 0.57237 0.57503 0.57828 0.58204
0.58594 0.58984 0.59375 0.59766 0.60156 0.60547 0.60938 0.61328 0.61709 0.62047
0.62321 0.62585 0.62907 0.6328 0.6367 0.64061 0.64452 0.64842 0.65233 0.65623
0.66014 0.66405 0.66795 0.67186 0.67577 0.67967 0.68358 0.68748 0.69139 0.6953
0.6992 0.70311 0.70702 0.71092 0.71483 0.71873 0.72264 0.72655 0.73045 0.73436
0.73827 0.74217 0.74608 0.74998 0.75389 0.7578 0.7617 0.76561 0.76952 0.77342
0.77733 0.78123 0.78514 0.78905 0.79295 0.79686 0.80077 0.80467 0.80858 0.81248
0.81639 0.8203 0.8242 0.82811 0.83202 0.83592 0.83983 0.84379 0.84809 0.85303
0.85825 0.86301 0.86717 0.87109 0.875 0.87891 0.88281 0.88672 0.89063 0.89453
0.89844 0.90234 0.90625 0.91016 0.91406 0.91797 0.92188 0.92578 0.92969 0.93359
0.9375 0.94141 0.94531 0.94922 0.95313 0.95703 0.96094 0.96484 0.96875 0.97266
0.97656 0.98047 0.98438 0.98828 0.99219 0.99609 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00746 0.0143 0.02046 0.02604 0.03093 0.03517 0.03911 0.04301 0.04692
0.05083 0.05473 0.05864 0.06255 0.06645 0.07036 0.07426 0.07817 0.08208 0.08598
0.08989 0.0938 0.0977 0.10161 0.10551 0.10942 0.11333 0.11723 0.12114 0.12505
0.12895 0.13286 0.13676 0.14067 0.14458 0.14848 0.15239 0.1563 0.16018 0.16384
0.16691 0.1695 0.17236 0.17587 0.17972 0.18362 0.18753 0.19144 0.19534 0.19925
0.20316 0.20706 0.21097 0.21487 0.21878 0.22269 0.22659 0.2305 0.23441 0.23831
0.24222 0.24611 0.2498 0.25293 0.25554 0.25835 0.2618 0.26564 0.26955 0.27345
0.27736 0.28127 0.28517 0.28908 0.29298 0.29689 0.3008 0.3047 0.30861 0.31252
0.31642 0.32033 0.32423 0.32814 0.33205 0.33595 0.33986 0.34377 0.34767 0.35158
0.35548 0.35939 0.3633 0.3672 0.37111 0.37502 0.37892 0.38283 0.38673 0.39064
0.39455 0.39845 0.40236 0.40627 0.41017 0.41408 0.41798 0.42189 0.4258 0.4297
0.43361 0.43752 0.44142 0.44533 0.44923 0.45314 0.45705 0.46095 0.46486 0.46877
0.47267 0.47658 0.48048 0.48439 0.4883 0.4922 0.49611 0.50002 0.50392 0.50783
0.51173 0.51564 0.51955 0.52345 0.52736 0.53114 0.53446 0.53716 0.53984 0.54311
0.54688 0.55078 0.55469 0.55859 0.5625 0.56641 0.57031 0.57422 0.57813 0.58203
0.58594 0.58984 0.59375 0.59766 0.60156 0.60547 0.60938 0.61328 0.61719 0.62109
0.625 0.62891 0.63281 0.63672 0.64063 0.64453 0.64844 0.65234 0.65625 0.66016
0.66406 0.66797 0.67188 0.67578 0.67969 0.68359 0.6875 0.69141 0.69539 0.69978
0.70481 0.71 0.71465 0.71875 0.72267 0.72658 0.73048 0.73446 0.73883 0.74384
0.74904 0.75372 0.75783 0.76175 0.76566 0.76963 0.77398 0.77897 0.78417 0.78887
0.793 0.79692 0.80089 0.80522 0.8102 0.81541 0.82013 0.82426 0.82819 0.83209
0.836 0.8399 0.84387 0.84818 0.85313 0.85835 0.86309 0.86725 0.87117 0.87508
0.87898 0.88289 0.8868 0.8907 0.89461 0.89851 0.90242 0.90633 0.91023 0.91414
0.91805 0.92191 0.92545 0.92835 0.93094 0.93396 0.93759 0.94147 0.94537 0.94928
0.95319 0.95709 0.961 0.96487 0.96843 0.97136 0.97395 0.9769 0.98017 0.98309
0.98564 0.98829 0.9909 0.99313 0.99515 0.99739 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00743 0.01396 0.0192 0.02378 0.02865 0.03387 0.03874 0.04295 0.04659
0.04958 0.05217 0.0551 0.05866 0.06253 0.06644 0.07034 0.07425 0.07816 0.08204
0.08566 0.08868 0.09127 0.09417 0.09772 0.10158 0.10548 0.10939 0.1133 0.1172
0.12111 0.12502 0.12892 0.13281 0.13646 0.13951 0.1421 0.14498 0.14849 0.15234
0.15625 0.16016 0.16406 0.16797 0.17188 0.17576 0.17943 0.18252 0.18512 0.18796
0.19145 0.1953 0.1992 0.20311 0.20702 0.21092 0.21483 0.21873 0.22264 0.22653
0.23022 0.23335 0.23596 0.23877 0.24223 0.24606 0.24997 0.25388 0.25778 0.26169
0.26559 0.2695 0.27341 0.27731 0.28122 0.28513 0.28903 0.29294 0.29683 0.30055
0.30372 0.30635 0.30913 0.31254 0.31636 0.32027 0.32417 0.32808 0.33199 0.33589
0.3398 0.3437 0.34761 0.35152 0.35542 0.35932 0.36306 0.36628 0.36893 0.37167
0.37504 0.37885 0.38275 0.38666 0.39056 0.39447 0.39838 0.40228 0.40619 0.41009
0.41385 0.4171 0.41977 0.42248 0.42582 0.42961 0.43352 0.43742 0.44133 0.44524
0.44914 0.45304 0.45682 0.4601 0.46278 0.46548 0.46879 0.47257 0.47647 0.48038
0.48428 0.48819 0.49197 0.49528 0.49798 0.50066 0.50394 0.50771 0.51161 0.51552
0.51942 0.52321 0.52655 0.52926 0.53193 0.53519 0.53894 0.54285 0.54675 0.55066
0.55456 0.55836 0.56172 0.56446 0.56711 0.57034 0.57409 0.57799 0.58189 0.5858
0.58961 0.59299 0.59574 0.59838 0.60159 0.60532 0.60922 0.61313 0.61703 0.62094
0.62485 0.62875 0.63266 0.63648 0.63989 0.64266 0.6453 0.64847 0.65218 0.65608
0.65999 0.66389 0.6678 0.67171 0.67561 0.67952 0.68342 0.68733 0.69124 0.69514
0.69905 0.70296 0.70686 0.71077 0.71467 0.71858 0.72249 0.72639 0.7303 0.73421
0.73811 0.74202 0.74592 0.74989 0.75422 0.7592 0.76441 0.76913 0.77327 0.77719
0.7811 0.785 0.78891 0.79282 0.79678 0.80108 0.80603 0.81125 0.816 0.82016
0.82408 0.82799 0.83194 0.83623 0.84116 0.84638 0.85115 0.85532 0.8593 0.86358
0.86849 0.87371 0.8785 0.88273 0.88702 0.89192 0.89718 0.90234 0.90752 0.91281
0.91797 0.92315 0.92843 0.93359 0.93877 0.94406 0.94922 0.95439 0.95968 0.96485
0.97002 0.97527 0.98015 0.98469 0.98958 0.99483 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
] put
dup /Table [9 9 9 9 [
[<FF8080E6807FCC807FB3807E98807E7E807E62807F44807F1F8280FD7E8BE47E8ACB7E88
B17E87977F867D7F85617F844380831E8184FB7D97E27D94C97D91B07D8F967E8D7B7E8B
607E8A427F881C8088F97CA3E17C9FC87C9BAE7C98947D957A7D925F7D8F417E8D1B7F8C
F77BAEDF7BA9C67BA5AD7CA0937C9C797C995E7D95407D93197E8FF67BBADD7BB4C57BAF
AB7BA9927BA4787CA05D7C9C3F7D98187D90F47AC6DC7ABFC37AB8AA7AB2917BAC777BA7
5C7CA23E7C9F177C90F37AD3DB7ACAC27AC3A97ABB907AB5767BAF5B7BAA3D7CA5167B8F
F27AE0DA79D6C179CDA87AC58F7ABE757BB75A7BB23D7BA9167B8F>
<EE897ED6887EBF877DA7867D8E867D75857E5A857E3E857F198680EC8889D58787BE8686
A585858D84847384845984833C8483178584EA8694D38591BC858FA4848D8C838B72838A
5883883B8388168488E8859FD2859CBA8498A383958A839371829057828E3A828D14848B
E785AAD084A6B983A2A1829E89829A70829756819439829213838DE584B5CF83B0B882AB
A082A68881A26F819E55819A39819812828CE484C1CE83BBB782B49F81AF8781AA6E81A5
5480A138809E11818CE383CDCD82C5B681BE9E81B88680B26D80AD5480A83780A311808B
E283D9CC82D0B581C89D80C18580BA6D80B55380B03780A510808B>
<DD927DC7907CB18F7C9B8D7C848C7C6C8B7D528A7D37897E118C80DB9187C68F86B08E84
9A8C84838B836B8A83518982358882108B84DA9091C58E8FAF8C8D988B8B818A8A698988
5088873487870F8987D88F9CC38D98AE8C96978A9380899168888F4F878D34878C0E888A
D78EA6C28CA2AC8B9E96899B7F88986787954E86933386920D8789D68EB1C18CACAB8AA7
9589A37E889F66879C4E86993286980D8689D58DBCC08BB6AA8AB19488AC7D87A76686A3
4D85A032859D0C8688D48DC7BF8BC0A989BA9388B47C87AF6586AA4D85A73185A10C8588
D38CD2BE8BCBA889C49288BD7C86B76486B34C85AE3184A10B8588>
<CD9C7BB9997BA4977B8F947B79927B62907C4A8F7D2F8E7D0A9080CB9B85B79884A39683
8E9382789182618F82498E822E8D820A8F83CA9A8FB6978DA2958B8D928A779088618F87
498D872E8D87098D86C99999B59696A194938C919176908F5F8E8D488C8C2D8C8C098C86
C798A3B4969F9F939C8B9199758F965F8D94478C922C8B92088B86C698ADB395A89E92A4
8A90A1748E9D5E8D9A468B982C8B97088A85C597B7B294B29E92AD8990A9738EA55D8CA1
468B9F2B8A9C088A85C597C1B194BC9D92B6888FB1738EAC5C8CA9458AA62B8A9D078985
C496CCB094C69C91C0878FBA728DB55C8CB1458AAC2A899D078985>
<BDA67AAAA27A979F7A839C7A6F997B59977B42957C28947D059380BCA584A9A183969E82
829B816E9881589681429481279381049283BBA48DA8A08B959D89819A886D9787589586
419386279286049183B9A396A7A093949C9180998F6C978E57948C40928B26918C049083
B9A29FA69F9C939C997F99976B96945693923F9191259191048F83B8A2A9A59EA5929BA1
7F989E6A959B5593993F9197259096048E82B7A1B3A49EAE919BAA7E98A66A95A25593A0
3E909E259099048D82B6A1BDA49EB7919AB27D97AE6995AA5492A73E90A5248F99038D82
B5A1C7A39DC1909ABB7D97B66994B25492AF3E90AA248F98038C82>
<AEB07A9CAC7A8AA87A78A47A64A17A509D7B3A9B7C209B7C009680ADAF839BAB8289A781
77A38064A0804F9C80399A80209A81009580ACAE8B9BAA8A89A68876A287639F864F9C86
3999851F9986009380ABAD949AA99288A59075A18E629E8C4E9B8B38988B1F988C009280
AAAD9D99A99A87A59774A195619D934D9A913898901E9790009280AAACA698A8A286A49F
74A09C619D994D9A973797971E9694009180A9ACAF98A7AB86A3A773A0A3609CA04C999E
37979D1E9694009080A8ABB897A7B385A3AF739FAB609CA84C99A63796A31E9594009080
A8ABC297A7BD85A3B7729FB35F9CB04C98AD3696A51E9594008F80>
<A0BB798FB6797EB1796CAD795AA87A47A57A32A27B18A27C0091809FBA828EB5817DB080
6CAC805AA77F46A48031A18018A1810090809EB98A8EB4887DAF876BAB8659A68546A385
31A08518A0860090809DB8928DB3907CAE8E6BAA8C58A68B45A28A319F8A179F8B008F80
9DB79A8CB2987BAE956AA99358A59145A190309E90179E8F008F809CB7A38CB2A07BAD9D
6AA99A57A49844A196309E97179D90008E809CB6AC8BB1A87BADA469A8A157A49F44A09D
309D9C179D90008E809BB6B58BB1B07AACAC69A7A857A3A644A0A5309DA0179C90008E80
9BB6BE8BB0B97AACB469A7B057A3AE449FAB309CA0179C90008E80>
<92C57982C07972BA7962B57950B1793EAC7A2AAA7A0FAB7B008D8091C58182BF8072BA7F
61B47F50B07F3EAB7F29A87F10AA80008D8091C48981BE8771B98661B38550AF843DAA84
29A78410A885008D8091C39081BD8E71B88D60B38B4FAE8A3DA98A29A68A10A789008D80
90C29881BC9671B79360B2924FAD903DA98F29A59010A68B008C8090C1A080BC9D70B69A
60B1984FAC963DA89629A59610A58B008C808FC1A980BBA570B6A260B09F4FAC9D3CA79D
29A49A10A48B008C808FC0B180BBAD70B5A960B0A64EABA43CA7A329A39C10A38B008C80
8FC0BA80BAB570B5B060AFAD4EAAAB3DA6A829A39C11A38B008C80>
<85D17976CA7967C47857BF7847BA7935B57921B27A08B37B008A8084D08076C97F66C47F
57BE7E46B87E35B47E21B17F08B180008A8084CF8875C88666C38557BD8446B78435B384
21B08409AF84008A8084CD8F75C78D66C18B56BC8A46B68935B18921AE8A09AE86008A80
84CD9775C69466C09256BB9046B58F35B08F21AD8F0AAC87008A8084CC9E75C69B66C099
57BA9746B49535AF9522AC940AAB87008A8084CBA675C5A266BF9F57B99D46B39C35AF9C
22AB970BAA87008A8084CBAE75C4A966BEA657B8A447B3A335AEA122AB970BA987008A80
84CAB675C4B166BEAD57B8AA47B2A936ADA422AA970BA988008B80>
][<F37B7ADB7C7AC37C7AAA7C7A917D7B787D7B5D7E7C407E7C1B807DF07A85D97A84C17A83
A97B82907C82767C815C7D813F7D81197E81EE7890D7798EC0798CA87A8B8F7A89757B88
5B7C873D7C86187D85ED779CD67899BE7896A679938D7991747A8E597B8C3C7C8B177C89
EB76A8D477A3BD779FA5789C8C7998737995587A923B7B90157A8CEA75B3D376AEBB76A9
A377A48B78A072799C5779983B7A9614798EE875BFD175B9BA76B3A276AD8A77A87178A3
57799F3A799C13798DE774CBD075C4B975BDA176B68977B07078AB5678A63979A213788D
E774D7D074CFB875C7A076C08876B96F77B35578AE3978A612788C>
<E28478CC8478B683799F837987837A6F827A55827B39837C14857DE08383CB8282B58281
9E81818681806E8180548180388280128381DF818EC9818CB3818A9C80898580886D8087
538086378185118284DD8099C88096B27F939B7F91837F8F6B7F8D527F8B36808A108088
DB7FA4C67FA0B07F9C9A7E99827E966A7E93517F91357F8F0F7F8ADA7FAFC57EAAAF7EA6
987EA2817E9E697E9A507E97347E950E7F8AD97EBAC47EB5AE7DAF977DAA807DA5687DA1
4F7D9E347E9B0E7E89D87EC5C37DBFAD7DB9967DB37F7DAD687DA94F7DA5337DA00D7D89
D77DD1C27DCAAC7CC3967CBC7F7CB6677CB14E7DAD337DA20D7D89>
<D28D77BE8C77A98B77938A787D89796688794E877A32877B0D897CD08C81BC8B80A88980
92887F7C877F65877F4D867F3186800C8880CF8B8BBB898AA788889187877B8686648685
4C85853085840B8684CD8A95BA8893A5879190868F7A858D63858B4B848A2F84890A8587
CC89A0B8879DA4869A8F85977985946284924A84902F838F0A8487CB88AAB787A6A386A3
8D859F78849B6183984983962E8395098386CA87B5B686B0A285AC8C84A77783A360839F
48829C2D829A098286C987C0B586BAA185B58C84B07683AB5F82A74882A42D829E098286
C987CBB585C5A084BE8B83B87583B35F82AF4782AB2D819E088186>
<C29776AF95769C9377889177738F785D8E79468C7A2B8C7B078D7DC1957FAE937F9B917E
87907E728E7E5C8D7E458B7F2A8B7F068B80C09489AD92889A9086868E86718D855B8C84
448B84298A84068A83BE9393AC9191998F8F858D8D708C8B5A8B8A438A89298989058984
BD929DAB909A988E97848D956F8B92598A9042898F28898F058883BC92A7AA90A3978EA0
838C9C6E8B99588997428895278894058783BB91B1A98FAC968DA8828BA46D8AA158899E
41889C278799058683BB91BBA88FB6958DB1818BAC6C8AA85788A54187A327879A048683
BA90C6A88EC0948CBA808BB56C89B05788AD4087A926879A048583>
<B3A075A19E758F9B767C98776996775494783E927923927A01907DB29F7EA09C7E8E9A7D
7C977D68957D53937E3D917E23917E018F80B19E879F9B868E99857B9684679484529283
3C9083229083018D81B09D909E9A8E8C988D7A958B66938A5191893B8F88228F89018C81
AF9C9A9D9A978B979579949265929151908F3B8F8E218E8E018B81AE9CA39D99A08B969D
78949A6491975090953A8E94218E93018A81AD9BAD9C98A98A96A57793A164919E4F8F9C
3A8D9B208D96018A81AD9BB69B98B28995AD7793A96391A64F8FA3398DA1208D96018980
AC9BC19B98BB8995B67692B26390AE4E8EAB398DA6208C95018980>
<A4AB7494A77583A37571A0765E9D774B9B783599781B9979008E7FA3AA7D93A67D82A27C
709F7C5E9C7D4A9A7D35987D1B987E008C80A2A98692A58581A184709E835D9B83499982
3497821A9783008B80A2A88E91A48D80A18B6F9D8A5C9A894998883496871A9688008A80
A1A79791A39580A0926E9D915C9A8F48978E33958D1A958D008A80A0A6A090A39D7F9F9A
6D9C985B99964896943394941A9491008980A0A6A98FA2A57E9FA26D9B9F5A989C47969B
32949A1994910088809FA5B28FA2AE7E9EAA6C9BA65A98A44795A232939F199391008880
9FA5BC8EA1B77E9EB36C9BAE5A98AC4695A93293A2199391008880>
<96B57486B17477AD7566A97554A57642A2772DA07812A27800898095B47C86B07C76AC7C
66A87C54A47C41A17C2D9F7C12A17D00898095B38486AF8376AB8265A78253A38141A081
2C9E81129F8200888094B28C85AE8B75AA8964A68853A287409F872C9D87129E87008880
94B19584AD9274A99164A58F52A18E409E8D2C9C8D129D8B00878093B19D84AC9A74A898
63A49652A1943F9D932B9B93129C8C00878093B0A683ACA273A89F63A49D51A09B3F9D99
2B9A99129B8C00868092B0AE83ABAA73A7A762A3A4519FA23F9CA12B9A9D129A8C008680
92AFB783ABB373A7AF62A3AB519FA93F9CA72B999D129A8C008680>
<88C0737ABB746BB6745BB2754BAE7639AA7624A8770AAA7700868088BF7B7ABA7B6BB57B
5BB17B4AAC7B38A97B24A77C0BA87C00868088BE8379B9826AB4815BB0814AAB8038A880
24A6810BA78100858088BD8B79B8896AB3885AAF874AAA8638A78624A4860BA585008580
87BC9279B7906AB28F5AAE8D49A98C38A68C24A38C0BA48800858087BB9A78B69869B296
59AD9449A99237A59224A2920BA38800858087BBA278B69F69B19D59AC9A49A89937A499
24A2970CA28800858086BAAB78B5A769B0A459ACA149A7A037A49F24A1980CA188008480
86BAB378B5AF69B0AC59ABA949A7A737A3A424A0980CA088008480>
<7BCB736EC6735FC07450BC7441B7752FB3751BB27503B0780083807BCA7B6EC57A5FBF7A
50BA7A41B67A2FB27A1BB07A04AE7C0083807BC9826EC4815FBE8050B98040B47F2FB07F
1BAF8005AC800083807BC8896DC2885FBD8650B88640B3852FAF851CAD8605AB83008380
7BC7906DC18E5FBC8D50B78C40B28B2FAE8B1CAC8B06A9840083807BC6986DC1965FBB94
50B69240B1912FAD911CAB9006A8840083807BC69F6DC09D5FBA9A50B59840B0972FAC97
1CAA9306A7840083807BC5A76DBFA45FBAA150B49F40AF9E30AB9D1CA99307A684008380
7BC5AF6DBFAC5FB9A850B4A641AFA530ABA01DA89307A585008380>
][<E67673D07774B97875A279768A7A77717A78587B793B7C7A177D7AE4757ECE767EB8767E
A1777E89787E70797E567A7E3A7B7E157B7EE2738ACD7488B675879F76868777856F7884
557983397A83147A82E07295CB7393B574909E758E86768C6E778B547889387988137986
DF70A1C9729DB3739A9C74978575946C769153778F37788D127789DD70ACC871A8B272A3
9B739F83749C6B759852769536779311778BDC6FB8C770B2B171AD9A72A88273A46A759F
51769B36769910768BDB6EC3C670BDB071B79972B18273AC6A74A75175A235769F0F758A
DB6ECFC56FC8AF70C19871BA8172B46974AE5075AA3475A30F758A>
<D67F72C27F73AD7F74977F75807F766980775080783580790F8279D57D7CC17D7CAC7E7C
967E7D7F7E7D687E7D4F7F7D347F7D0E807ED37C87BF7C86AA7C85957C847E7D84677D83
4E7D83337E820D7F82D17B92BD7B90A97B8E937B8C7D7C8B657C894D7C88327D870C7E85
D0799DBC7A9AA77A97927A957B7B92647B904C7C8E317C8C0C7C88CF79A8BB79A4A679A0
90799D7A7A9A637A974B7B94307B930B7C88CE78B3BA78AEA578AA8F79A57979A1637A9D
4B7A9A307A980B7B87CD77BEB978B9A478B38F78AE7979A96279A54A7AA12F7A9D0A7A87
CC77C9B877C3A377BD8E78B77878B16179AC4979A92E799F0A7A87>
<C68871B48772A186738C86747785756085764985772E8578098679C5867BB3867B9F857B
8B847B76847C5F847C48837C2D847D08857DC48585B284849E84838A83837583825E8282
4782822C8381088381C3848FB0838E9D828C88828A7382895D81884681872B8186078284
C18399AF82979B81958781927281905C818E45808D2A818C078184C082A4AE81A19A819D
86809A7180975B80954480932A8092068084BF81AEAD81AA9980A68580A2707F9F5B7F9C
447F99297F97067F84BF81B9AC80B49980AF847FAB6F7FA65A7FA3437EA0297E9C067F84
BE80C4AC80BE987FB9847FB36F7EAE597EAA437EA7287E9B067E84>
<B79170A69071948E72818D736D8C74588B76418A77278A78038A7AB69079A58E7A938D7A
808C7A6C8A7B57897B40897C26897C03897DB58F83A48D82928C827F8A816B8981568881
3F8881258881038781B48D8DA38C8B918A8A7E89896A88885587873E8786248786028682
B38C96A28B949089927D889069878E54868D3E868C24868C028581B28CA0A18A9D8F899B
7C87986886955386933D8592238591028481B18BAAA089A78E88A37B87A067869C52859A
3C8498238496028381B18AB49F89B08D88AC7A86A86685A45285A13C849F228497028381
B08ABF9F89BA8C87B57986B06685AC5184A93B83A5228397028281>
<A99B6F9998708896717694736392744F91753990761F9177008A7BA89A78989779879579
75937962917A4E907A388F7B1E8F7B00897FA798819796818694807492806190804D8F80
378E801D8E80008780A6978A969589859388739187608F864C8E86378C851D8D85008680
A5969395949284929072908E5F8E8D4B8D8B368C8B1D8C8B008580A4959D94939A839198
718F965E8D934B8C92368B911C8B90008480A495A69393A38290A0708F9D5E8D9A4A8B98
358A981C8A93008480A394B09392AC8290A8708EA55D8CA24A8B9F358A9E1C8A93008380
A394BA9292B58190B16F8EAD5D8CA9498AA73489A31B8992008380>
<9AA56F8BA2707B9F716A9C72599A7345987430967516987500867E9AA4778BA1787B9E78
6A9B7858997945977930957A16977A00858099A3808A9F7F7A9D7F699A7F57977F44957F
2F947F15957F00848098A188899E87799C866899865796854494842F9384159485008380
97A091889D8F789B8E67988C56968B43938A2E928A15938900828097A09A889D97789A95
6797935595924293902E919015928D008280969FA3879CA077999D66979A559498429297
2E909714918E008180969FAC879CA87799A56696A254949F42929E2D909C14918E008180
959EB5869BB17698AD6596AA5493A74191A52D8F9E14908E008180>
<8DAF6E7EAB6F6FA8705FA5714FA2723C9F73289E740DA1740082808CAE767EAA776FA777
5FA4774EA1783C9E79289D790D9F790082808CAD7E7DA97E6EA67E5FA27E4E9F7E3B9D7E
279B7E0D9D7E0081808BAC867DA8856EA5855EA1844D9E843B9C83279A830D9C83008180
8BAB8F7CA78D6DA48C5DA08B4D9D8A3B9B892799890D9A870080808AAA977CA7956DA393
5DA0914C9D903A9A8F26988F0D99890080808AAA9F7BA69D6CA29A5C9F984C9C963A9996
2697950D988900808089A9A87BA6A56CA2A25C9E9F4B9B9D3A999D2697990D9789008080
89A9B17BA5AD6CA2AA5C9EA74B9BA53998A326969A0D9789008080>
<7FBA6D72B66E64B26F55AE7045AA7233A8721FA77306A7730080807FB97572B57664B176
55AD7644A97733A6771FA57806A5790080807FB87D71B47D63AF7C54AB7C44A87C33A57D
1FA47D06A37E0080807FB78571B28463AE8354AA8244A78232A4821FA28207A182008080
7EB68C71B18B62AD8A53A98943A68832A3881FA18807A0850080807EB59470B19262AC91
53A88F43A58E32A28E1FA08E079F850080807EB49C70B09A62AC9853A89643A49532A194
1E9F93079D850080807DB4A470B0A162AB9F53A79D43A39B32A09B1E9E95079C85008080
7DB4AC70AFA962ABA652A7A443A3A332A0A01E9E95089C85008080>
<73C56D66C16E58BC6F4AB8703AB47129B17115B27100AB7400808073C47466C07558BB75
4AB7753BB2762AAF7615B07600AA7900808073C37C66BE7B58BA7B4AB57B3BB17B2AAE7B
15AE7B01A87D00808073C28366BD8258B8814AB4813AB0812AAD8116AC8101A681008080
72C18A65BC8958B78849B3873AAE862AAB8616AB8702A48100808072C09165BB9058B68E
49B28D3AAD8C2AAA8D16A98C02A38100808072BF9965BA9758B59549B1943AAD932AA993
16A88F02A28200808072BFA065BA9E58B59C49B09A3AAC9A2AA89817A78F03A182008080
72BEA865B9A658B4A349AFA13AABA02AA89C17A78F03A082008080>
][<DA726DC5736EB074709A75718376736B7874527976367A77127A77D86F78C37178AE7279
98747981757A6A767A51777B35787B11797BD66E83C26F82AD7182977281807381697581
50768034778010777FD46C8EC06E8DAB6F8B9571897F72886773874F75863375850F7683
D26B99BE6C97A96E94946F927D719066728E4E748C33748A0E7587D16AA5BD6BA1A86D9E
926E9A7C70976571944D73923273900D7489D069B0BC6AACA76CA7916EA37B6F9F64719B
4C72983172960D7389CF68BBBB6AB6A66BB1906DAC7A6EA76370A24B719F31729C0C7288
CF68C6BB69C0A56BBA906CB4796EAF636FAA4B71A63071A00C7288>
<CA7A6CB77A6DA47B6F8F7B70797C72637C734B7D75307E760B7F76C97876B67977A37978
8E7A78787A79627B794A7C7A2F7C7B0A7E7BC77681B57781A178808C7880777980617A80
497A7F2E7B7F0A7C7FC6758BB3758A9F76898B77887678875F78864879852D7A84097B82
C47396B274949E75928A769074778E5E778C47788B2C788A097A86C372A1B0739E9D749B
8875987376955D76934677912C778F087985C272ABAF72A89C73A48774A072759D5C7699
4576972B7795087885C171B6AF72B29B73AD8773A97274A45C75A145769E2B769A077785
C171C1AE71BC9A72B78673B17174AC5B75A84475A52A759D077785>
<BB836BAA826C98826E8482707082715A8273448274298375058477BA8175A98176978076
8380776F807859807943807928817A05827BB97F7FA87F7F967F7F827F7F6E7F7F587F7F
427F7F27807E04817FB87E89A67E88947D87817E866D7E85577E85417E84277E84047F82
B67C93A57C91937C8F807C8E6B7C8C567D8B407D8A267D89047E83B57B9DA47B9B927B98
7E7B966A7C93567C913F7C8F257C8F037D82B47BA7A37BA4917BA17E7B9E6A7B9A557B98
3F7B96257B94037C82B47AB2A27AAE907AAA7D7AA6697AA2547A9F3E7B9D247A98037C82
B37ABCA27AB88F7AB37C7AAE687AAA547AA63E7AA3247A98037B82>
<AD8C6A9D8A6C8C896D7A896F6688715287723C8774228874008877AC8A739C89748B8875
7987766587775186783B867821867900867BAB887D9B877D8A877D78867D64857D50857D
3A847E20857E00847FAA87869A86868985857785846384844F83833A8383208483008280
A9869099858F88848D75838C62838A4E82893982881F8288008180A88599988497878395
7482936282914E828F38818E1F818E008080A784A39783A186829E74829B6181984D8196
3880951E8092008080A684AD9683AA8582A67381A360819F4C809D37809C1E8094008080
A683B79682B38481AF7281AB5F80A74C80A4377FA11E7F94008080>
<9F956990936B80916D6F906E5D8F70498E71348D731A8F7300837B9E94728F92737F9074
6E8F755C8D76488C77338C78198D7800827E9D927B8E907B7E8F7C6D8D7C5B8C7C488B7C
328A7D188B7C0080809C91848D8F847D8D836C8C835A8B82478A82328982188A82008080
9B908D8C8E8C7C8C8B6B8B8A598A894689883188871889870080809A8F968B8D957B8B93
6A8A9158898F45888E31878D17888C0080809A8EA08B8C9D7A8B9B698998588896458794
308694178790008080998DA98A8CA67A8AA36989A057889D44879B30869A17868F008080
998DB28A8BAF798AAB6888A85787A54486A330859F16858F008080>
<919F69839C6B749A6C64986E53966F4095712B947210977100807E909E71829B72739973
6397745295753F93762B9276109576008080909C7A819A7A72977A62957B51937B3F927B
2A917B10937B0080808F9B828198827296816294815092813E91812A9081109281008080
8E9A8B80978A7195896193885091873E9086298F861090850080808D99937F9692709490
60928F4F908D3D8F8C298E8C108F8A0080808D989C7F969A7094985F91964F8F943D8E93
298D930F8E8A0080808C98A57E95A26F93A05F919D4E8F9B3C8D9A288C980F8D8A008080
8C97AE7E95AB6F93A85F90A54E8EA23C8DA1288C9B0F8C8A008080>
<84A96876A66A68A36B59A06D499E6E379C70229C70089E7000808083A87076A57168A272
599F73489D74369B75229A75089B7500808083A77875A47967A179589E79489B7A36997A
22997A09997B00808082A58075A280669F80579D80479A7F36987F22977F099880008080
81A48874A187669E87579B8647998535978521968509968400808081A39073A08F659D8E
569B8D46988C35968B21958B09948600808080A39973A097659D95569A93469792349591
21949109938600808080A2A1739F9F649C9C55999A459799349598219395099286008080
80A2A9729FA7649CA45599A24596A034949E219396099186008080>
<77B4676AB0695CAD6B4EAA6C3FA76D2DA56E19A66E02A37000808076B36F6AAF705CAC71
4EA8723EA5732DA37319A47302A07500808076B17769AE775CAA774EA7783EA4782DA279
19A278029E7A00808076B07E69AC7E5BA97E4DA67E3EA37E2DA07E19A07E039C7F008080
75AF8668AB855BA8854DA4843DA1842D9F83199F84039A8200808075AE8E68AA8C5BA78B
4CA38A3DA08A2C9E89199E8A03998200808075AD9568AA945AA6924CA3913DA0902C9D90
199D8E03978200808074AD9D68A99B5AA6994CA2983D9F972C9D96199C91049682008080
74ACA568A9A35AA5A14CA19F3C9E9E2C9C9C199B91049682008080>
<6ABF675EBB6851B86943B46B34B16C23AF6D0EB16C009F740080806ABE6E5EBA6F51B670
43B27034AF7123AD720FAF71009E780080806ABD755EB97651B57643B17634AE7624AC77
0FAD76009D7C0080806ABB7C5DB77C51B37C43AF7C34AC7C24AA7C0FAB7C009B80008080
69BA835DB68350B28243AE8234AB8224A98210A982009A8000808069B98B5DB58A50B189
43AD8834AA8824A78810A887009A8000808069B8925DB49150B09043AC8E34A98E24A68E
10A68B00998000808069B8995DB49850AF9643AB9534A89524A59410A58B009880008080
69B8A15DB39F50AF9D43AB9C34A79B24A59810A58B009880008080>
][<CD6C66BA6E68A6706B91716D7B736F6474704C76723277740E7874CB6A71B86C72A46E73
906F757A71766373774B74783175780D7678CA687CB76A7CA36C7C8E6E7C796F7D62717D
4A727D30737D0C757DC86687B56886A16A858D6C85776E846170834971832F72820B7481
C66492B36690A0698E8B6B8D766C8B606E8A4870882E70870B7284C5639DB2659A9E6798
8A6995756B935F6D90486F8E2D6F8D0A7287C462A8B164A59D66A189689D746A9A5E6C97
476E942D6E930A7187C361B3B063AF9C66AA8868A6736AA25D6B9E466D9B2C6D980A7087
C261BEB063B99C65B48767AE7269A95C6BA5466CA22C6C9D097086>
<BF7565AD76689A766A87776C72786E5C7970457A722B7B73087D73BD7270AC7371997472
8675747176755B77764478772A7978077B78BC707AAA717B98737B84747B70757C5A767C
43777C29777C067A7CBA6E85A970849671848372836E7382597482437582297681067980
B96D8FA76E8E956F8C81718B6D728A587388427487287486067783B76C9AA66D97946E95
8070936C719157728F41738D27738C057784B76BA4A56CA1936D9E7F6F9B6B7098567195
407293277292057783B66AAFA46BAB926DA77E6EA36A6F9F56709C40719A267197057883
B569B9A46BB5916CB07E6DAB6A6EA75570A33F71A126709A057883>
<B07D65A07D678F7D697D7E6B697E6D547E6F3E7F71248072028174AF7B6F9F7B708E7B71
7B7C73687C74537D753D7D76237E77028078AE79799E79798D7A7A7A7A7A677B7A527B7B
3C7C7B237C7B017E7CAD77829C78828B7882797981667981517A813C7A81227A80017E80
AB768C9B768B8A778A7877896578885078873B7986217986017E81AA74969A7594897693
77769164778F50778D3A788C21788C017E81A973A099749E88759B7675986376964F7694
3A7792207691017F81A973AA9873A78774A47574A062759D4E769A397699207595017F81
A872B49873B18773AC7474A86174A54E75A23876A01F7595017F80>
<A2866494856784856972846B60846D4C846F3784701C8571008077A2846E93836F838370
7183725F82734B82743682751C837500807BA182779182788181787081795E81794A817A
35817A1B827A00807E9F80809080808080806F7F805D7F80497F80347F801B807F008080
9E7F898F7E897F7E886E7E875C7E86497E86347E851A7E850080809D7E938E7D927E7D90
6D7D8E5B7D8D487D8C337D8B1A7D8A0080809C7D9C8D7D9A7D7C986C7C965A7C94477C92
337C91197C8F0080809C7CA68D7CA37D7CA06B7B9D5A7B9B477C99327B98197B91008080
9B7BB08C7BAC7C7BA96B7BA5597BA2467BA0327B9E197A91008080>
<958F64878E66788C68688C6A568B6C438A6E2E8A6F148D6F00807A948D6C868C6E778B6F
678A715589724389732E8874138A7400807E938B75858A76768977668877548878428779
2D8779138879008080928A7E84897E75887E65877E54867E41867E2D857E13877E008080
9188878387867486866486855385854184842C848412858400808090879082868F73858D
63858C52848B40838A2C838A1283880080809086998285977385956284935183923F8290
2B829012828C0080808F86A28185A072849D62839B5182983F82972B819612818C008080
8F85AB8184A87183A56182A25082A03E819E2B819B11808C008080>
<8799637A97656C95675D93694C926B3A916D26916E0B946D00807D87976C7A956D6C936E
5C92704C90713A9072258F730B91720080808695747994756B92755B90764B8F77398E77
258E780B8F7700808085947C78927C6A907C5B8F7D4A8E7D398D7D258C7D0B8D7D008080
849284779184698F845A8E834A8C83388B83248B820B8B8200808084918D76908C688E8B
598D8A498B89388A88248A880B8986008080839095768F94688D92598C91488A8F37898F
24898F0B888700808083909E758E9C678D9A588B98488A963789952388940B8787008080
828FA7758EA4678CA2588A9F48899D36889C2387980B8687008080>
<7BA3626EA065619E67529C69429A6A31996C1D9A6C04996D0080807AA16A6E9F6C609C6D
529A6F4299703197711C987104967200808079A0726D9D73609B74519975429775309676
1C9676049477008080799E7A6C9C7A5F997B50977B41967B30947B1C947B04927C008080
789D826C9A825E98815096814094812F93811C9381059081008080789C8A6B99895E9788
4F95884093872F92871C9287058E83008080779B926A99915D96904F948E3F928D2F918D
1C908D058D83008080779A9A6A98995D96974E93953F91942E90941B9091058C83008080
769AA26A98A05D959E4E939C3F919B2E8F9A1B8F92058B83008080>
<6EAD6262AA6455A86647A56738A36927A26A12A46A00996E0080806EAC6962A96B55A66C
47A46D38A16E27A06F12A26F0097730080806DAB7161A87155A57247A27338A074279E74
13A0740096780080806DA97861A67854A37946A079389E79279D79139E7900947C008080
6CA87F60A57F54A27F469F7F379D7F279B7F139D7F0093800080806CA78760A48653A186
469E85379C85269A85139B850092800080806BA68E60A38E53A08D459D8C379B8B26998B
139A8A0091800080806BA5965FA295539F94459C92369A9226989213998D009080008080
6BA59E5FA29D539F9B459C9936999926979713988D009080008080>
<62B86156B5624AB3643CB0662EAE671DAD6808AF6700937300808061B86856B4694AB16A
3CAE6B2EAC6C1DAB6D09AC6C00927700808061B66F55B37049AF703CAC712EAA721DA972
09AA7200917C00808061B47655B17649AE763CAB772EA8771DA7770AA77700907F008080
60B37D55B07D49AC7D3CA97D2EA77D1DA67D0AA67D008F8000808060B28455AF8449AB83
3CA8832DA5831DA4830AA482008E8000808060B18B55AE8A49AA8A3CA7892DA4891DA389
0AA287008D8000808060B09255AD9149A9903CA6902DA38F1DA28F0AA187008D80008080
60B09A55AC9949A9983CA5972DA2961DA1930BA087008C80008080>
][<C16760AF69639C6B65886D68736F6A5E716D47726F2D73710A7671BF646BAD676D9B696E
876B70726D715D6F734670742C7175097475BD6276AC6476996677856978716B785C6D79
456E7A2B6F7A09737ABB5F80AA628097648084678070697F5A6B7F446D7F2A6D7F08727F
BA5D8BA8608A9663898265886E6787596A86436B852A6B84087282B85C96A75F94946192
8164906D668E58688C426A8B29698A087385B75AA0A65D9E93609B8062986C6595576793
416991286890077385B759ABA55CA7935FA47F61A06B649D57669A416897286795077485
B659B6A45CB1925EAD7F61A86B63A45665A040679E276699077485>
<B36F5FA370629172657E73676B746A56766C40776E267770047B71B26C6AA16E6C906F6D
7D716F6A72715573723F7574257574047976B06A74A06B758E6D767C6F77687077547278
3E7379257379047A7AAF687E9E697E8D6B7E7B6D7E676E7E53707E3D717E24717E037A7E
AD66889D68888B6987796B86666D85526E843C7084236F83037B82AC64929C66918A688F
786A8E656B8C516D8B3C6E8A236D89037B82AB639D9B659A896798776996646A93506C91
3B6D90226C8F037B82AA62A79A64A48966A176689D63699A4F6B983A6C96226B94037B82
AA61B19963AD8865A97667A56369A24F6A9F3A6B9D216A97037C82>
<A6775F967862867864757967627A694E7B6C397B6E1F7C6F008072A4746995756B85766C
74776E6178704D79713879731E7A73008077A372729473738474747275756076764C7777
3778781E787800807BA2707C93717C82727D71737D5F747D4B757D36767D1D757D00807F
A06E86916F858170857072845E73844A74833574831C74820080809F6D8F906E8E806F8D
6F708C5D718A4A72893573881C72880080809E6B998F6D977F6E956E6F935C7091497190
34728E1C708D0080809E6BA38F6CA07E6D9E6D6E9B5B6F984870963471951B6F91008080
9D6AAD8E6BA97E6CA66D6DA25B6E9F48709D33709B1B6E92008080>
<98805E8A7F617B7F646B806659806946806B31816D17826D008076977D68897D6A7A7D6C
6A7E6D587E6F457E71307F7216807200807A967B71887B72797B73687C74577C75447C76
307D77167D7700807E95797A87797A787A7B677A7B567A7C437B7C2F7B7C157B7C008080
9477838677837778836678825579824379822E7A8115798100808093768C85768C76778B
65778A5477894278882E788715788700808092759684759475759265769153768F41778E
2D778D14768B00808091749F83749D74759A6475985376964176942D769414758D008080
9173A88374A67374A36374A052759D40759B2C759A14758D008080>
<8B885E7E88617087636087664F86683D866A29876C0E896B00807A8A86677D86696F856B
5F856C4F856E3D84702885710E867000807D89846F7C84716E83725E83734E83743C8375
2883760E84750080808882787B82796D81795E817A4D817A3B817B27817B0D827A008080
8780817A80816C80815D80804C7F803B7F802780800D8080008080867F89797F896B7F88
5C7E874C7E873A7E86267E860D7E85008080867E92787E916A7E905B7D8E4B7D8D397D8C
267D8C0D7D89008080857D9B787D996A7D975A7C954A7C94397C93267C920D7C89008080
857CA4777CA2697C9F5A7C9D4A7C9B387B9A257B970D7B88008080>
<7E925D729160648F63568F65468E67348D69208E6A068F6A00807D7D9066718F68648E69
558D6B458C6D348B6E208C6F068C6F0080807D8E6E708D6F638C70548B72458A73338A74
1F8A74068A740080807C8C766F8B77628A775489784488783388791F887906887A008080
7B8A7E6E897E61887E53887E43877E32867E1F877E07867F0080807A89866E8886608786
5286854385843285841E85840784830080807A888F6D878E60868D51858C42848B31848A
1E848B0783840080807987976D86965F85945184924284913183911E8390078284008080
79879F6C869E5F859C51849A4183983182981E8294068184008080>
<729C5D669A5F5998624B97643C96662B956816986800936A00807F719A65659866599768
4B956A3C946C2B936D16956D00916F00808070986C65966E58956F4A93703B92712A9272
169372008E740080807096746495755793754A92763B90772A9077169177018C79008080
6F957C63937C56927C49907C3A8F7C298E7C168F7C018B7E0080806E9383629283569083
488F833A8E82298D82158D820189810080806E928B62918B558F8A488E89398C88298C88
158C880188810080806D9293629092558E91478D90398B8F288B8F158B8D018781008080
6D919B618F9A558E98478C97388B96288A95158A8E018681008080>
<65A65C5AA45E4EA26041A063329F64219F660CA265008E6E00808065A5635AA3654EA067
409E68329D6A219D6B0C9F6A008C7300808064A36A59A16C4D9F6D409D6E319B6F219B70
0C9C6F008A7800808064A172589F724C9D733F9B743199752199750D9A7400897C008080
639F79589D794C9B7A3F997A31987A20977A0D987A008880008080639E80579C804B9A80
3E98803096802096800D9680008780008080629D88579B874B99873E9786309586209486
0D9485008680008080629C8F579A8F4B988E3E968D30948C20938D0D9388008580008080
629C97579A964B97953E95943093932092920D9289008580008080>
<59B25A4EAF5D42AD5F36AB6127AA6216AB6203AA6300897200808058B0614EAE6342AB65
35A96627A86716A96704A76800887700808058AF684DAC6A42AA6B35A76C27A66D16A66C
04A46D00867B00808058AD6F4DAA7041A87135A57127A47216A47205A17300857F008080
57AB764DA97741A67735A47727A27716A277059F7900848000808057AA7D4CA77D41A57D
34A27D27A07D16A17D059D7E00838000808057A9844CA68441A38434A183269F83169F84
059B8200838000808057A88B4CA58B41A38A34A08A269E8A169E89059A84008280008080
56A7924CA49241A291349F91269D91169D8E059884008180008080>
][<B5615AA4645D9266608068636C6B66576D69416E6C286F6E07756FB35E64A26167916369
7E666B6B686D566A6F406C71276C72067573B15B6FA15E708F61727D6373696674556875
3F6A76266977067678AF587A9F5B7A8E5E7A7B617B68637B54667B3E687C26677C06767D
AE55849D59838C5C837A5F826762825364823D6681256581067780AC538E9C578D8B5A8C
795D8A6660895262883D6487246287057784AB52999B55978A5995785C92655E9051618F
3C638D24618D057784AA51A39A54A089579D775A9A645D975060953C6293245F92057783
AA50AD9A53AA8856A67659A2645C9F505F9C3B609A235E96057783>
<A86959986B5D886C60766E636370664F71693A736B21736D017E6FA76663976866876A68
756B6A636D6C4F6F6E397070207071017E74A5636E95656F856770746972616B734E6D74
396E75206D76017E78A3607894627884657972677960697A4D6B7A386C7B1F6B7B017E7C
A25D819260818262817165815F67814C6980376A801E6880017E80A05C8B915E8B81618A
7063895E65884B67873668861E6786017F819F5A95905D94805F926F62905D648E4A668D
36678C1E658C017F819F599F8F5C9D7F5E9A6E60985C63954965933566921D6490017F81
9E58A98F5BA67F5DA36E5F9F5C629C49649A3565991D6393017F80>
<9B71598D725C7D73606D74635B756548766833776A19786B0080729A6E638C6F657C7067
6C726A5A736C47746E32756F197570008077996B6C8A6C6E7B6E6F6B6F71597172467273
32737418727500807B976876896A767A6B77696D78586E7945707931717A18707A00807E
96667F87687F78697F686B7F576D7F446E7F306F7F176E7F008080946489866688776887
676987566B86436C85306D85176C8500808094629285649176668F66688E556A8C436B8B
2F6B8B176B8A00808093619C85639A766597656795546893426A922F6A91166A8E008080
9260A58462A27564A065669D54679A4269982E699716698F008080>
<8E795981795C737A5F637B62527B65407C672B7D69117E690080768D7662807764727767
62786951796B3F7A6D2B7A6E117C6E00807A8C736B7F746C70756E6176705077713E7772
2A787310797300807E8B71747D72756F73766074774F74773D75782A7678107778008080
8A6E7D7C707D6E717D5F727D4E737E3D737E29747E10757E008080896D867B6E856D6F85
5E70854D71843C72842872830F7483008080886B8F7A6C8E6C6E8D5D6F8C4D708A3B708A
2870890F7287008080876A987A6B966C6C955C6E934C6F913B6F90276F900F718A008080
8769A1796A9F6B6C9C5C6D9A4C6E983A6E97276E950F718A008080>
<82825875815C68815F598161498264378266238368098568008079817F61747F63677F66
587F68487F6A36806C22816D09826D00807D807C69737C6B667D6D577D6E477D70367E71
227E720980720080807F7A72727A73657A74567B75467B76357C77217C77097D77008080
7E787A71787B64787B55797C46797C357A7C217A7C097C7D0080807D7683707683637783
547782457882347882217882097A810080807C748B6F758B62768A547689447688337788
2076880879850080807B73946F749361749153759044758F33758E20758E087886008080
7B729C6E739B617499537497437496327495207493087786008080>
<758B586A8A5B5D895E4F89613F89632E8965198B66028A6700807C7488606988625C8765
4E87673F87692E876A19886B02876C00808073866868856A5B856B4D856D3E846E2D856F
1986700285710080807283706783715A83724C83733D82742C8375198375028377008080
7181786681795981794B817A3D817A2C817A18817A02817C008080718080657F80587F80
4B7F803C7F802C7F80187F80038080008080707E88647E88587E874A7E873B7E862B7D86
187D86037E820080806F7D90647D8F577D8E4A7D8D3B7C8C2B7C8C187C8B037D82008080
6F7C98637C97577C96497C943B7C932A7B93177A90037D82008080>
<6994575E935A52925D44925F3591622492630F956300886A00807F68925F5D9161519063
448F65358F67248F680F916800866E0080806790665C8F68508E6A438D6B358D6D248D6D
0F8F6D008474008080668D6E5B8D6F4F8C70428B71348B72238B730F8C72008379008080
668B755B8B764F8A774289773389782389780F897800817D008080658A7D5A897D4E887D
41887E33877E23877E0F877E0080800080806489855988844D8784408684328684228584
0F858300808000808064878C59878C4D868B40858A32848A22848A0F8488008080008080
6387945986934D85924084913283902283900F828A008080008080>
<5D9F56529D59479C5B3A9B5E2C9A601A9C61079C6100846D0080805C9D5D529B5F469A61
3A99632B98651A99660799660082720080805B9B645199664698683997692B966A1A976B
07966B0081770080805B986B50976D45966E38946F2A94701A947007937000807B008080
5A96735095734494743892752A92751A927507907600807F00808059957A4F937A44927B
37917B2A907B19907B078E7C0080800080805993814F9281439181379081298F81198F81
078C810080800080805992884E9188439088378F87298D87198D87078B85008080008080
5892904E9090438F8F368E8E298C8E198C8D078985008080008080>
<51AA5446A9573BA7592FA65B21A65D0FA95D00A06000807100808050A95B46A75D3BA55F
2FA46120A3620FA662009D650080760080804FA66245A5643AA3652EA16620A1670FA367
009B6A00807A0080804FA46945A26A3AA16B2E9F6C209F6D0FA06C00986F00807E008080
4EA26F44A070399F712D9D72209D720F9E720096750080800080804EA076449F77399D77
2D9C781F9B780F9C7700947A0080800080804D9F7D439E7E399C7E2D9A7E1F997E0F9A7E
01927F0080800080804D9E84439C84399B842D99841F98840F9883019180008080008080
4D9D8C439C8C389A8B2D988B1F978B0F9788018F81008080008080>
][<AA5B549A5E5789615B77635F6566625168663C6A6923696B04796DA8575E985A61885D64
76606664636950656C3B676E22666F047A71A6536996566A865A6C755D6E6260704F6272
3A6473226374047A76A44F73945374845775735A76615D774E6078396178216079047A7B
A24C7D93507D83547D72577E605B7E4D5E7E385F7E205E7E047A7FA14A87924E87825286
7155855F59854C5C84385D84205C84037A829F4792904C9081508F70538D5E578C4B5A8A
375B8A205A8A037A829F469C904A99804E976F52955D55934B5891375A901F598F037A82
9E44A68F49A27F4D9F6F519C5D54994A57973658961F5893037A82>
<9E62548F64577F675B6E695F5C6B62496D65356E681C6E6A00806E9C5E5D8D61607E6363
6D65665C6868496A6B346B6D1B6A6E0080739A5A678C5D697C606B6C626D5A656F476771
3368721B68730080789857718A5A727B5D746A60755962764664773266771A657800807C
97547B88577B795A7C695D7C58607C46627D32637D1A637D00807F955285875584785884
685B84575E83456083316183196283008080944F8E86538D77568C67598B565C8A445E89
315F88196088008080944E98855196775594675892565B91445D8F305D8E195F8D008080
934CA285509F76549C66579A555A97435C96305C95185E90008080>
<916A53846B57756D5B656F5E5470614272652D736714746800807290665D826860746A63
646B65536D68416F6A2D706C13716C0080778E626681646873676A63696C526A6E406C70
2C6D71136E7100807B8D5F6F7F61717164726266735168743F69752B6A76136C7600807E
8B5C797E5F7970617A60637A50657B3E677B2B677C126A7B0080808A5A827D5C826F5F82
5F61824F63813E65812A658112698100808089588B7C5A8B6E5D8A5F5F894E62883D6387
2A63871268860080808856957B59936D5C925E5E904E608E3C628D29618D12678A008080
88559E7B589C6D5A995D5D974D5F953C619429609311668C008080>
<8572537873576B745A5C755E4B76613A77642678660C7B66008076846E5C776F5F6A7162
5B72644B736739746925756B0C786B00807A826A65766C67686E695A6F6B4A706D38716F
2572700B767000807D81676E74696F676B71596C72496E73376F74246F750B7375008080
806477736677666878576A79486B79376C7A236C7A0B727A0080807F627F726480656680
566880476980366A80236A800B70800080807E6088716288646487566687466886356986
2368860B6F840080807D5F9171619063638F55658D46668C35678C22668C0B6E87008080
7D5D9A7060986362965563944565933466922264910A6E87008080>
<797A536D7A57607B5A527C5D427C60317D631D7E6405816500807978765B6C775E5F7861
517964427966307A681D7B69057E6A00807D7673646B74665E756850766A41776C30776D
1C786E057C6F00808075706C69716D5D726F4F73704074722F75731C7573057A74008080
746D74686F755C70764E71773F72782F72781B727805787A008080736B7D676D7D5B6E7D
4D6F7D3E707E2E707E1B707E05787F008080726985676B855A6C854C6D843E6E842D6E84
1B6E8405788300808072688D66698D596B8C4C6C8B3D6D8A2D6D8A1A6C8A057883008080
7166966668955969934B6B923D6B902D6C901A6B8F047983008080>
<6D835262835655835948835C39845F28846113876200836600807C6C805A61805D548060
47806238816527816613836600816A00807F6B7C625F7D64537D66467E68387E6A277F6B
13806B00806F00808069796A5E7A6C527B6D457B6F377B70267C71127D70008075008080
6877725D7873517874447975367976267976127A7600807A00808067757A5C757A51767B
44777B35777B25777C12787B00807E0080806773825C7482507482437582357581257581
12768200808000808066718A5B72894F7389437388347488247488117487008080008080
6670925B71914F729042728F34728E24728E11738B008080008080>
<618C52568C554A8C583E8C5B2F8C5D1E8D5F098E5F00806900807E60895955895C4A895E
3D89612F89631E8A640A8B6400806E0080805F86605486634986653C86672E86681D8769
0A87690080730080805E836853836948836B3B836C2D846E1D846E0A846E008078008080
5D816F5281704781723B81722D81731C827309827400807D0080805C7F77527F78467F78
3A7F792C7F791C7F7909807A0080800080805B7D7E517D7F467D7F397D7F2C7D7F1C7D7F
0A7E7F0080800080805B7B86507C86457C85397C852B7C851C7B85097C84008080008080
5A7A8D507B8D457B8C397B8C2B7A8B1B7A8B097B86008080008080>
<5597504B965340955633955925955B13985C02955E00806D0080805494574A935A3F935C
33925F24936013956102916200807200808053915E4990603E9062329064249066139266
028E67008077008080528E65488E673D8D69318D6A238D6B128F6B028B6D00807B008080
518C6C478B6E3C8B6F308B70238B70128C7002887200807F008080518A734789743C8975
30897622887612897602867800808000808050887B46887B3B877B2F877C22877C12877C
02857D0080800080804F86824686823B86822F8582228582118582028381008080008080
4F85894585893B85892F8488228488128387038282008080008080>
<48A24E3FA15134A05428A0561AA15809A35800926000807000808047A0553E9F57339E5A
289E5C199F5D099F5D008F64008075008080479D5C3D9C5E339B60279B61199C62099C62
008C6900807A008080469A623D9964329965269867189967089867008A6E00807D008080
4598693C976A31966B26966C18966C08956D0088740080800080804596703B9571319471
2594721894720992720086790080800080804494773B9377319378259278179278099079
00857E00808000808044927E3A927E30917E25917E17907E088E7E008380008080008080
4391853A9185309085258F84178F85098C83008280008080008080>
][<9F544E905752805A566F5D5A5E605E4B63623664661E6468017D6B9D4F588E525B7F565F
6E59625C5C654A5F6836616B1E606C027D709B4A628C4E657D52676D55695B596C495C6E
355D701D5D71027D7599456C8A4A6E7B4E706B52715A5573475874345A751C5B76027D7A
9741768946777A4A786A4F7959527947557A33567B1C597B027D7E953E80874380794880
694C805850804653803354801C5781027D81943B8A86408A784589684A88574E87455186
3251861B5687027D81933894853E9277439167488F574C8E454F8D324F8C1B558C027D81
92369E853C9B764199674696564A94454D93324D921B5490027D81>
<945B4E855D5276605666635A56655E4367622F686517696600806E91565884595B755C5E
655F615561644363672F646A16666B008073905161825464745866645B69535E6B41606D
2E616F1664700080778E4D6B80506D72546E635770525A71405D732D5D7415627400807B
8C49757F4D75715176615477515778405A792C5A7915607A00807F8B457E7E4A7E6F4E7E
60517F50557F3F577F2C577F155E7F0080808A42887C47876F4B86604F865052853E5585
2C5485145E850080808940917C45906E498E5F4D8D4F518C3E538B2B528B145E8A008080
883E9A7B43986D48965F4C944F4F923E51912B5191145E8D008080>
<88624E7B64526D66565E685A4D6A5E3C6C61286D640F7164008072865D5779605A6B625E
5C64614C66643B68662769690E6E69008076845860785B636A5E655B61684B636A3A656C
27656E0E6C6E00807B83546976576B695A6D5A5D6F4A60703961722661730E697300807E
815073755474675775595A76495D77385E77255E780D6978008080804D7C74517C66547C
58577D485A7D385C7D255B7E0D697E0080807F4A85734E84655284575584485883375983
2559830D6A830080807E488E724C8D65508C56538B47568A3757892457890D6A87008080
7E4696714A95644E9356519147549036558F24558F0D6A89008080>
<7D694E706B52636D56546E5A45705D3471602072620778630080767B65576F675A62695D
536A60446C63336D651F6D6707756800807A79605F6D6362606564526767436969326A6B
1F696C07746D00807D785C686C5F6A5F616C51636D42656F3166701E6671077472008080
7659706A5B725E5E735060744162753163761E637607747800808075557969587A5D5B7A
4F5E7B40607B30607C1D617C07747D0080807453826856825C59824E5B81405D812F5E81
1D5E8207748100808073508A68548A5B57894E59883F5B882F5B871D5D88077485008080
734E936752925B55904D588F3F598E2F5A8D1C5C8D077584008080>
<71714E6573525874554B75593C765C2B775F177860017F620080796F6D56646E5957705C
4A715F3B72622A7364167465017F6700807D6E695E626A61566C63496E653A6F682A7069
16706A017F6C0080806C656661676855696A486A6C396C6D296C6F156D6F017E72008080
6B616E606370546571476772396873286974156B74017E770080806A5E775F6077536378
466479386679286679156979017E7C008080695B7F5E5E7F52607F45627F37637F27637F
14677F017E800080806859875D5C87515E86456086376185276085146585017E81008080
68578F5D5A8E515C8D445E8C365F8B265E8C14648A017E81008080>
<657A4D5A7B514E7C55417C58327D5B227E5D0D815D00806600807C6376555977584D785B
40795E327A60217A620D7D6200806A00807F62725D57735F4C74623F7564317666217667
0C796700806F008080616E64566F664B71683E726A30726B20736C0C766C008075008080
606A6C556C6D4A6D6F3D6F702F6F711F6F720C747100807A0080805E6774546975496B75
3C6C762F6C771F6C770C727700807E0080805E657B53677C48687C3C697C2E6A7D1E697D
0C707D0080800080805D62835364834766833B67832E68831E67830C6E82008080008080
5C608B52638B47648A3B66892D66891E65890B6D87008080008080>
<59834C4F845044845337855629865917885A04885C00806900807E577F534E8057428059
36815C28825E17835F05846000806E008080567B5B4C7C5D417D60357D62277E64167F64
0581650080730080805578624B7964407966347A68277A69167B69047E6A008078008080
5474694A756B3F766C33776D26776E15786E047B7000807C0080805371714972723F7373
337473257474157574047976008080008080526E784870793E717932727925727A157279
05787B008080008080526C7F486E803D6F80327080246F80147080047980008080008080
516A87476C873D6D86316E86246D86146F86047983008080008080>
<4D8E4B438D4E398E512D8E541E8F560C9257008A5C00806D0080804C8A52428A55388A57
2C8A5A1E8C5B0C8D5C0086610080720080804B865841865B37875D2B875F1D88610C8961
0083660080770080804A825F4083613683632A84651C84660C856600816B00807B008080
497F663F806835806929806A1C816B0B816B00807000807F008080487C6D3E7D6E347D6F
287D701B7E700B7F710080760080800080804779743E7A75337B76287B761A7B760B7C76
00807B00808000808046777B3D787C33797C27797C1A797C0A7A7D00807F008080008080
4675833D76833277832777821A76820B7982008080008080008080>
<41994938994C2E994F229951129C52039A540085600080700080803F964F3696522C9654
2096561199570395590082640080750080803E92553592582B925A1F935C11955C03915E
0080690080790080803D8E5C348F5E2A8F601E8F61109161038D6300806E00807D008080
3D8B63338B64298C651E8C66108D66038A690080740080800080803C886933896B29896B
1D896C0F8A6C03876E0080790080800080803B85703286712886711D87720F8772038574
00807E0080800080803A83773184772784781C85780F847802837A008080008080008080
3A817E31827E27837E1C837E0F827E03827F008080008080008080>
]]] put
dup /DecodeABC [
{0 pop} bind
{{0 0.00389 0.00778 0.01167 0.01556 0.01945 0.02335 0.02724 0.03113 0.03502
0.03891 0.0428 0.04669 0.05058 0.05447 0.05836 0.06226 0.06615 0.07004 0.07393
0.07782 0.08171 0.0856 0.08949 0.09338 0.09727 0.10117 0.10506 0.10895 0.11284
0.11673 0.12062 0.12451 0.1284 0.13229 0.13618 0.14008 0.14397 0.14786 0.15175
0.15564 0.15953 0.16342 0.16731 0.1712 0.17509 0.17899 0.18288 0.18677 0.19066
0.19455 0.19844 0.20233 0.20622 0.21011 0.214 0.2179 0.22179 0.22568 0.22957
0.23346 0.23735 0.24124 0.24513 0.24902 0.25291 0.25681 0.2607 0.26459 0.26848
0.27237 0.27626 0.28015 0.28404 0.28793 0.29182 0.29572 0.29961 0.3035 0.30739
0.31128 0.31517 0.31906 0.32295 0.32684 0.33073 0.33463 0.33852 0.34241 0.3463
0.35019 0.35408 0.35797 0.36186 0.36575 0.36964 0.37354 0.37743 0.38132 0.38521
0.3891 0.39299 0.39688 0.40077 0.40466 0.40855 0.41245 0.41634 0.42023 0.42412
0.42801 0.4319 0.43579 0.43968 0.44357 0.44746 0.45135 0.45525 0.45914 0.46303
0.46692 0.47081 0.4747 0.47859 0.48248 0.48637 0.49026 0.49416 0.49805 0.50194
0.50583 0.50972 0.51361 0.5175 0.52139 0.52528 0.52917 0.53307 0.53696 0.54085
0.54474 0.54863 0.55252 0.55641 0.5603 0.56419 0.56808 0.57198 0.57587 0.57976
0.58365 0.58754 0.59143 0.59532 0.59921 0.6031 0.60699 0.61089 0.61478 0.61867
0.62256 0.62645 0.63034 0.63423 0.63812 0.64201 0.6459 0.6498 0.65369 0.65758
0.66147 0.66536 0.66925 0.67314 0.67703 0.68092 0.68481 0.68871 0.6926 0.69649
0.70038 0.70427 0.70816 0.71205 0.71594 0.71983 0.72372 0.72762 0.73151 0.7354
0.73929 0.74318 0.74707 0.75096 0.75485 0.75874 0.76263 0.76653 0.77042 0.77431
0.7782 0.78209 0.78598 0.78987 0.79376 0.79765 0.80154 0.80544 0.80933 0.81322
0.81711 0.821 0.82489 0.82878 0.83267 0.83656 0.84045 0.84435 0.84824 0.85213
0.85602 0.85991 0.8638 0.86769 0.87158 0.87547 0.87936 0.88326 0.88715 0.89104
0.89493 0.89882 0.90271 0.9066 0.91049 0.91438 0.91827 0.92216 0.92606 0.92995
0.93384 0.93773 0.94162 0.94551 0.9494 0.95329 0.95718 0.96107 0.96497 0.96886
0.97275 0.97664 0.98053 0.98442 0.98831 0.9922 0.99609}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
] put
dup /MatrixABC [
0.625 0.625 0.625
0.3712 0 0
0 0 -0.928
] put
dup /RangeLMN [0 1.1856 0 1 -0.464 1] put
dup /DecodeLMN [
{-0.1856 add 100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.4821087968 mul} bind
{100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.5000076295 mul} bind
{0.464 add 100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.4124589914 mul} bind
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0.0006189305 0.000641909 0.0005295142] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
} ifelse

/CSA add_res
/CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 0 colr
ef
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.5709 56.8396 mo
102.978 118.851 li
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
@
104.133 120.465 mo
96.23 116.923 li
95.726 116.697 95.5005 116.106 95.7264 115.602 cv
95.9522 115.098 96.5439 114.872 97.0478 115.098 cv
97.0478 115.098 li
101.822 117.237 li
101.335 112.028 li
101.283 111.479 101.687 110.991 102.237 110.939 cv
102.237 110.939 li
102.787 110.888 103.274 111.292 103.326 111.842 cv
cp
ef
56.1456 96.7584 mo
102.188 120.111 li
@
103.958 121.008 mo
95.3125 121.516 li
94.7611 121.549 94.2879 121.128 94.2555 120.577 cv
94.2232 120.025 94.6438 119.552 95.1952 119.52 cv
95.1952 119.52 li
100.418 119.213 li
97.5801 114.818 li
97.2805 114.354 97.4138 113.735 97.8777 113.435 cv
97.8777 113.435 li
98.3417 113.136 98.9607 113.269 99.2603 113.733 cv
cp
ef
[8 6 ] 0 dsh
59.8957 153.862 mo
102.499 121.684 li
@
104.083 120.487 mo
95.4837 121.514 li
94.9353 121.579 94.5438 122.077 94.6093 122.625 cv
94.6748 123.174 95.1724 123.565 95.7208 123.5 cv
95.7208 123.5 li
100.916 122.88 li
98.8985 127.707 li
98.6855 128.217 98.926 128.802 99.4356 129.015 cv
99.4356 129.015 li
99.9452 129.228 100.531 128.988 100.744 128.478 cv
cp
ef
[8 6 ] 0 dsh
58.5709 56.8396 mo
214.899 57.7653 li
@
216.883 57.7771 mo
209.377 62.0965 li
208.898 62.372 208.287 62.2072 208.011 61.7285 cv
207.736 61.2498 207.901 60.6385 208.379 60.363 cv
208.379 60.363 li
212.914 57.7536 li
208.411 55.0907 li
207.935 54.8096 207.778 54.1963 208.059 53.7209 cv
208.059 53.7209 li
208.34 53.2455 208.953 53.088 209.429 53.3691 cv
cp
ef
[8 6 ] 0 dsh
126.109 120.472 mo
215.737 160.845 li
@
217.547 161.66 mo
208.934 162.566 li
208.385 162.624 207.893 162.226 207.835 161.676 cv
207.777 161.127 208.175 160.635 208.725 160.577 cv
208.725 160.577 li
213.928 160.03 li
210.89 155.77 li
210.569 155.32 210.674 154.696 211.124 154.375 cv
211.124 154.375 li
211.573 154.055 212.198 154.159 212.518 154.609 cv
cp
ef
[] 0 dsh
56.1456 94.9461 mo
215.598 94.3288 li
@
217.583 94.3211 mo
210.085 89.9863 li
209.607 89.7099 208.996 89.8734 208.719 90.3515 cv
208.443 90.8296 208.606 91.4413 209.084 91.7177 cv
209.084 91.7177 li
213.614 94.3364 li
209.105 96.9901 li
208.629 97.2703 208.47 97.8832 208.75 98.3592 cv
208.75 98.3592 li
209.03 98.8352 209.643 98.9939 210.119 98.7138 cv
cp
ef
234.556 162.115 mo
400.946 161.559 li
@
402.931 161.552 mo
395.436 157.213 li
394.958 156.937 394.346 157.1 394.069 157.578 cv
393.793 158.056 393.956 158.668 394.434 158.944 cv
394.434 158.944 li
398.962 161.565 li
394.451 164.217 li
393.975 164.497 393.816 165.109 394.096 165.586 cv
394.096 165.586 li
394.376 166.062 394.989 166.221 395.465 165.941 cv
cp
ef
[8 6 ] 0 dsh
240.556 94.321 mo
394.509 93.3337 li
@
396.494 93.321 mo
388.985 89.0053 li
388.506 88.7301 387.895 88.8952 387.62 89.374 cv
387.345 89.8528 387.509 90.4641 387.988 90.7393 cv
387.988 90.7393 li
392.524 93.3465 li
388.022 96.0116 li
387.547 96.293 387.39 96.9063 387.671 97.3816 cv
387.671 97.3816 li
387.952 97.8568 388.566 98.014 389.041 97.7327 cv
cp
ef
[] 0 dsh
237.895 57.7521 mo
285.526 116.956 li
@
286.77 118.502 mo
278.68 115.409 li
278.165 115.212 277.906 114.633 278.103 114.118 cv
278.301 113.602 278.879 113.343 279.395 113.541 cv
279.395 113.541 li
284.282 115.409 li
283.503 110.236 li
283.421 109.69 283.797 109.18 284.343 109.098 cv
284.343 109.098 li
284.889 109.016 285.398 109.392 285.48 109.938 cv
cp
ef
307.77 118.502 mo
401.087 160.746 li
@
402.895 161.564 mo
394.28 162.454 li
393.731 162.511 393.24 162.112 393.183 161.562 cv
393.126 161.013 393.526 160.522 394.075 160.465 cv
394.075 160.465 li
399.279 159.927 li
396.249 155.662 li
395.929 155.211 396.035 154.587 396.485 154.267 cv
396.485 154.267 li
396.936 153.948 397.56 154.053 397.88 154.503 cv
cp
ef
[8 6 ] 0 dsh
419.482 93.3214 mo
531.606 118.081 li
@
533.544 118.509 mo
525.298 121.157 li
524.773 121.326 524.209 121.036 524.041 120.511 cv
523.872 119.985 524.161 119.422 524.687 119.253 cv
524.687 119.253 li
529.668 117.653 li
525.824 114.104 li
525.418 113.73 525.393 113.097 525.767 112.691 cv
525.767 112.691 li
526.142 112.285 526.774 112.26 527.18 112.635 cv
cp
ef
[] 0 dsh
419.923 161.541 mo
531.693 119.182 li
@
533.549 118.479 mo
525.007 117.049 li
524.462 116.958 523.947 117.326 523.856 117.871 cv
523.764 118.415 524.132 118.931 524.677 119.022 cv
524.677 119.022 li
529.837 119.885 li
526.545 123.952 li
526.198 124.381 526.264 125.011 526.693 125.359 cv
526.693 125.359 li
527.123 125.706 527.752 125.64 528.1 125.21 cv
cp
ef
419.482 93.3214 mo
644.747 94.3127 li
@
646.732 94.3214 mo
639.232 98.6523 li
638.753 98.9284 638.142 98.7646 637.866 98.2863 cv
637.589 97.8081 637.753 97.1964 638.232 96.9203 cv
638.232 96.9203 li
642.762 94.304 li
638.255 91.6479 li
637.779 91.3675 637.62 90.7545 637.901 90.2787 cv
637.901 90.2787 li
638.181 89.8028 638.794 89.6444 639.27 89.9248 cv
cp
ef
419.923 161.541 mo
651.001 159.806 li
@
652.986 159.791 mo
645.473 155.484 li
644.994 155.209 644.382 155.375 644.108 155.854 cv
643.833 156.333 643.999 156.944 644.478 157.219 cv
644.478 157.219 li
649.017 159.821 li
644.518 162.491 li
644.042 162.773 643.886 163.387 644.168 163.861 cv
644.168 163.861 li
644.45 164.336 645.063 164.493 645.538 164.211 cv
cp
ef
554.542 118.502 mo
647.125 19.3272 li
@
648.48 17.8765 mo
640.185 20.3669 li
639.656 20.5258 639.356 21.0833 639.515 21.6123 cv
639.674 22.1412 640.231 22.4413 640.76 22.2825 cv
640.76 22.2825 li
645.771 20.778 li
644.614 25.8804 li
644.492 26.419 644.83 26.9546 645.368 27.0768 cv
645.368 27.0768 li
645.907 27.1989 646.442 26.8612 646.565 26.3226 cv
cp
ef
94.4099 129.517 mo
89.1282 121.415 88.6949 111.575 93.3514 105.477 cv
25400 lw
gsave
[-4.3001e-05 -6.59616e-05 6.59615e-05 -4.3001e-05 106.144 147.517 ]ct
@
grestore newpath
481.739 137.324 mo
473.679 128.81 471.716 116.355 476.876 106.459 cv
gsave
[-5.41325e-05 -5.71812e-05 5.71811e-05 -5.41325e-05 500.367 157.001 ]ct
@
grestore newpath
2 lw
126.109 120.472 mo
284.812 118.497 li
@
286.797 118.472 mo
279.263 114.202 li
278.782 113.93 278.172 114.099 277.899 114.579 cv
277.627 115.059 277.796 115.67 278.276 115.942 cv
278.276 115.942 li
282.828 118.522 li
278.342 121.214 li
277.868 121.498 277.715 122.113 277.999 122.586 cv
277.999 122.586 li
278.283 123.06 278.897 123.213 279.371 122.929 cv
cp
ef
307.77 118.502 mo
531.535 118.625 li
@
533.52 118.627 mo
526.037 122.986 li
525.56 123.264 524.948 123.103 524.669 122.625 cv
524.391 122.148 524.553 121.536 525.03 121.258 cv
525.03 121.258 li
529.551 118.624 li
525.033 115.986 li
524.556 115.707 524.395 115.095 524.674 114.618 cv
524.674 114.618 li
524.953 114.141 525.565 113.98 526.042 114.259 cv
cp
ef
271.527 118.194 mo
268.741 113.409 269.045 107.421 272.304 102.896 cv
25400 lw
gsave
[-3.96271e-05 -6.8042e-05 6.80419e-05 -3.96271e-05 278.606 130.348 ]ct
@
grestore newpath
grestore
gsave
42.5669 120.352 mo
51.5669 120.352 li
51.5669 111.383 li
42.5669 111.383 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: JXDRMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JXDRMX+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /perpendicular putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/perpendicular <1C60D8A8C9B08A94618283762900F1838A2794C246ED0461440A612368C5BBDD4A6D0335A86B4DC301C2D90E37D056E0D0D566C6199C9CFA00DDA987AE999909C971ACB1DA52F2498AD0> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPI+CMSY10 /JXDRMX+CMSY10 findfont ct_VMDictPut/DQJMPI+CMSY10*1 [127{/.notdef}rp /perpendicular 128{/.notdef}rp]DQJMPI+CMSY10 nfDQJMPI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf42.4553 119.972 mo(\177)shgrestore
gsave
41.8169 77.5655 mo
50.8169 77.5655 li
50.8169 68.5965 li
41.8169 68.5965 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: WGJRMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /WGJRMX+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /perpendicular putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/perpendicular <1C60D8A8C9B08A94618283762900F1838A2794C246ED0461440A612368C5BBDD4A6D0335A86B4DC301C2D90E37D056E0D0D566C6199C9CFA00DDA987AE999909C971ACB1DA52F2498AD0> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPJ+CMSY10 /WGJRMX+CMSY10 findfont ct_VMDictPut/DQJMPJ+CMSY10*1 [127{/.notdef}rp /perpendicular 128{/.notdef}rp]DQJMPJ+CMSY10 nfDQJMPJ+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf41.7053 77.185 mo(\177)shgrestore
gsave
224.552 115.221 mo
233.552 115.221 li
233.552 106.252 li
224.552 106.252 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
DQJMPI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf224.441 114.841 mo(\177)shgrestore
gsave
640.179 120.321 mo
680.179 120.321 li
680.179 104.321 li
640.179 104.321 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: ZIHRMX+CMEX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ZIHRMX+CMEX10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /tildewider putdef/FontBBox {-24 -2960 1454 772} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0] def/OtherBlues [-1159 -1139] def/BlueScale 0.0479599 def/StdHW [47] def/StdVW [47] def/StemSnapH [40 47] def/StemSnapV [40 47] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/tildewider <1C60D8A8C9B5EE3103FBED71DB5D425966431FF3B161B2617205F5A132025FF661F78AE0FC09E030EE3E02BF7D9AAFE68121456E1C10CD50B2AD50ABB5960B8AF8FBE1155DAEC8DCEAD83B24B3D84DA2EDC04819EF7307EAAE00502191A6> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPK+CMEX10 /ZIHRMX+CMEX10 findfont ct_VMDictPut/DQJMPK+CMEX10*1 [127{/.notdef}rp /tildewider 128{/.notdef}rp]DQJMPK+CMEX10 nfDQJMPK+CMEX10*1 [11.9551 0 0 -11.9551 0 0 ]msf641.055 113.974 mo(\177)shtrue set_gvm
%ADOBeginSubsetFont: NKDBAA+CMSS10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NKDBAA+CMSS10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 98 /b putdup 100 /d putdup 101 /e putdup 108 /l putdup 113 /q putdup 196 /tilde putdef/FontBBox {-61 -250 999 759} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 694 716 444 461 656 678] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [61] def/StdVW [78] def/StemSnapH [61 64] def/StemSnapV [78 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/b <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091A804487D3CC69BB9C43B70B1C054AE8BCF010FEB975725958C0171BBED6676C9AAAE6CFEE46F69DED7901CD1C4DCA677E0DE526159ACDEB3DE152447BA9BBFE3963B6938BEA3024E87A005166176A2DFF> |-/d <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091AF2A64FDF583D2492D2B07E549E6F0F191740B84475A05D8CB502D6FFA02A5BDBC262D7461F84CEFB949AA32E310EECB077C8C7052B181BF14CE47E6F9404B3FEBC4A576FA97D4D209BDF970697D6703F5C6BF334F97BF1> |-/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A3169762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C6662A2D6C7FC6E088D08DCAF0061583F541694> |-/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1E357CEC11DF3B72C60D7555125BC3695> |-/q <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F1779F7EEF73DB4C69DC4A750C7A5FF66E5A9D159C42737F792DA6713542A7A45B37981F065559F1C88AFFC5E12568F048551E9BA933FF3994169ADDC8D6CA17C2978F26F1B06DAA5D1F16677DDB46B661386765B> |-/tilde <1C60D8A8C9B7A73DB6782AB5C5A98FAFB8A980C2CE7AAD50270AA97A178190DDADFAD267A032AF4AC5437EAD83D3D168028916FBB468471F8B4B9ED2C949B64B26634A88705E216340DE85042FBF> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPL+CMSS10 /NKDBAA+CMSS10 findfont ct_VMDictPut/DQJMPL+CMSS10*1 [98{/.notdef}rp /b /.notdef /d /e 6{/.notdef}rp /l 4{/.notdef}rp /q 82{/.notdef}rp /tilde 59{/.notdef}rp]DQJMPL+CMSS10 nfDQJMPL+CMSS10*1 [11.9551 0 0 -11.9551 0 0 ]msf639.86 117.128 mo(del)[6.17712 5.31647 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: DZKQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DZKQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPM+CMR10 /DZKQMX+CMR10 findfont ct_VMDictPut/DQJMPM+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMPM+CMR10 nfDQJMPM+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf654.206 117.128 mo(\()shDQJMPL+CMSS10*1 [11.9551 0 0 -11.9551 0 0 ]msf658.956 114.141 mo(\304)sh658.856 117.128 mo(b)shtrue set_gvm
%ADOBeginSubsetFont: DEARMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DEARMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPN+CMMI10 /DEARMX+CMMI10 findfont ct_VMDictPut/DQJMPN+CMMI10*1 [44{/.notdef}rp /comma 211{/.notdef}rp]DQJMPN+CMMI10 nfDQJMPN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf665.033 117.128 mo(,)shDQJMPL+CMSS10*1 [11.9551 0 0 -11.9551 0 0 ]msf670.346 117.128 mo(q)shDQJMPM+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf676.523 117.128 mo(\))shgrestore
gsave
45.3271 177.237 mo
54.3271 177.237 li
54.3271 168.268 li
45.3271 168.268 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: XPZPMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /XPZPMX+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /latticetop putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/latticetop <1C60D8A8C9B08A94618283762900F19007ED4E082D92413121EA656CA4724B9B0E98536BF69D02930FA0C9C2D352535C4CA4C3AF0A5AA3A5ECB309050AB41862D05C11379C24FB72B1FE> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPO+CMSY10 /XPZPMX+CMSY10 findfont ct_VMDictPut/DQJMPO+CMSY10*1 [127{/.notdef}rp /latticetop 128{/.notdef}rp]DQJMPO+CMSY10 nfDQJMPO+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf45.2155 176.856 mo(\177)shgrestore
gsave
397.266 79.6656 mo
406.266 79.6656 li
406.266 70.6966 li
397.266 70.6966 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
DQJMPO+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf397.154 79.2851 mo(\177)shgrestore
gsave
659.438 86.0655 mo
668.438 86.0655 li
668.438 77.0965 li
659.438 77.0965 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
DQJMPO+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf659.327 85.685 mo(\177)shgrestore
gsave
89.0574 149.816 mo
133.057 149.816 li
133.057 136.816 li
89.0574 136.816 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: CDDBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CDDBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 101 /e putdup 112 /p putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPP+CMMI10 /CDDBAA+CMMI10 findfont ct_VMDictPut/DQJMPP+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 3{/.notdef}rp /e 10{/.notdef}rp /p /.notdef /r 141{/.notdef}rp]DQJMPP+CMMI10 nfDQJMPP+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf89.6131 146.023 mo(pre)[6.01468 5.72775 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: HWWAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /HWWAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPQ+CMR10 /HWWAAA+CMR10 findfont ct_VMDictPut/DQJMPQ+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMPQ+CMR10 nfDQJMPQ+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf106.921 146.023 mo(\()shDQJMPP+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf111.57 146.023 mo(a,r)[6.31958 5.31525 0 ]xshDQJMPQ+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf128.928 146.023 mo(\))shgrestore
gsave
170.341 182.093 mo
281.341 182.093 li
281.341 169.093 li
170.341 169.093 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: CEMQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CEMQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 100 /d putdup 101 /e putdup 112 /p putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPR+CMMI10 /CEMQMX+CMMI10 findfont ct_VMDictPut/DQJMPR+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 2{/.notdef}rp /d /e 10{/.notdef}rp /p /.notdef /r 141{/.notdef}rp]DQJMPR+CMMI10 nfDQJMPR+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf171.159 178.301 mo(pre)[6.01468 5.72775 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: GZFBAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GZFBAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPS+CMR10 /GZFBAA+CMR10 findfont ct_VMDictPut/DQJMPS+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMPS+CMR10 nfDQJMPS+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf188.466 178.301 mo(\()shDQJMPR+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf193.116 178.301 mo(a,r)[6.31955 5.31525 0 ]xshDQJMPS+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf210.474 178.301 mo(\))shtrue set_gvm
%ADOBeginSubsetFont: BRUPMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BRUPMX+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /logicalor putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/logicalor <1C60D8A8C9B64EDF769BF0314EE0CE1210B4AD52A433FB96A121A41A9EEDECB63D2D14C3EF4DEC5A3F70CDCDC75CDAD7110EE7DE99357F5484756BDE5E7D3E6A34583D8F252703625296942B36FC8BB36F1F22E6C517BC0C793F36FFA1> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPT+CMSY10 /BRUPMX+CMSY10 findfont ct_VMDictPut/DQJMPT+CMSY10*1 [127{/.notdef}rp /logicalor 128{/.notdef}rp]DQJMPT+CMSY10 nfDQJMPT+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf217.779 178.301 mo(\177)shtrue set_gvm
%ADOBeginSubsetFont: NOGAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NOGAAA+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /logicalnot putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/logicalnot <1C60D8A8C9B64EDFE7FAB5B9993E84A54A8A7935D1C533F79578AA86B9C425B37DDE42F51CE37E772969D4DDF09E3757650D431802387EB08C436C21> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPU+CMSY10 /NOGAAA+CMSY10 findfont ct_VMDictPut/DQJMPU+CMSY10*1 [127{/.notdef}rp /logicalnot 128{/.notdef}rp]DQJMPU+CMSY10 nfDQJMPU+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf228.404 178.301 mo(\177)shDQJMPR+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf236.377 178.301 mo(add)[6.31955 6.22391 0 ]xshDQJMPS+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf255.141 178.301 mo(\()shDQJMPR+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf259.79 178.301 mo(a,r)[6.31955 5.31525 0 ]xshDQJMPS+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf277.149 178.301 mo(\))shgrestore
gsave
321.298 184.268 mo
497.298 184.268 li
497.298 171.268 li
321.298 171.268 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: OIHRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OIHRMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 100 /d putdup 101 /e putdup 108 /l putdup 112 /p putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPV+CMMI10 /OIHRMX+CMMI10 findfont ct_VMDictPut/DQJMPV+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l 3{/.notdef}rp /p /.notdef /r 141{/.notdef}rp]DQJMPV+CMMI10 nfDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf321.956 180.475 mo(pre)[6.01471 5.72775 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: MCAQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MCAQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPW+CMR10 /MCAQMX+CMR10 findfont ct_VMDictPut/DQJMPW+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMPW+CMR10 nfDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf339.263 180.475 mo(\()shDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf343.913 180.475 mo(a,r)[6.31955 5.31525 0 ]xshDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf361.271 180.475 mo(\))shtrue set_gvm
%ADOBeginSubsetFont: YZLAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /YZLAAA+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /logicaland putdup 127 /logicalor putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/logicaland <1C60D8A8C9B64EDF769BF0314EE0CE1210B4AD5DC4C392D5CC500CBC0D2E06F5BF39BBBB19F8FD3BED83AA7D8B5EEFC22DD4AD377D96F603DAF5C5519020C41C9A686EFE9C2064941A3134F5F60B4D45FE717B345966EA466845527351> |-/logicalor <1C60D8A8C9B64EDF769BF0314EE0CE1210B4AD52A433FB96A121A41A9EEDECB63D2D14C3EF4DEC5A3F70CDCDC75CDAD7110EE7DE99357F5484756BDE5E7D3E6A34583D8F252703625296942B36FC8BB36F1F22E6C517BC0C793F36FFA1> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPX+CMSY10 /YZLAAA+CMSY10 findfont ct_VMDictPut/DQJMPX+CMSY10*1 [32{/.notdef}rp /logicaland 94{/.notdef}rp /logicalor 128{/.notdef}rp]DQJMPX+CMSY10 nfDQJMPX+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf368.577 180.475 mo(\177)shDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf379.204 180.475 mo(\()shDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf383.853 180.475 mo(del)[6.22272 5.56516 0 ]xshDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf399.444 180.475 mo(\()shDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf404.094 180.475 mo(a,p)[6.31955 5.31525 0 ]xshDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf421.742 180.475 mo(\))shDQJMPX+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf429.047 180.475 mo( )shtrue set_gvm
%ADOBeginSubsetFont: ACGAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ACGAAA+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /logicalnot putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/logicalnot <1C60D8A8C9B64EDFE7FAB5B9993E84A54A8A7935D1C533F79578AA86B9C425B37DDE42F51CE37E772969D4DDF09E3757650D431802387EB08C436C21> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPY+CMSY10 /ACGAAA+CMSY10 findfont ct_VMDictPut/DQJMPY+CMSY10*1 [127{/.notdef}rp /logicalnot 128{/.notdef}rp]DQJMPY+CMSY10 nfDQJMPY+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf439.672 180.475 mo(\177)shDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf447.645 180.475 mo(add)[6.31955 6.22391 0 ]xshDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf466.409 180.475 mo(\()shDQJMPV+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf471.058 180.475 mo(a,r)[6.31955 5.31528 0 ]xshDQJMPW+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf488.416 180.475 mo(\)\))[4.64944 0 ]xshgrestore
gsave
234.205 146.995 mo
334.205 146.995 li
334.205 133.995 li
234.205 133.995 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: PDBQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PDBQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 100 /d putdup 101 /e putdup 108 /l putdup 112 /p putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMPZ+CMMI10 /PDBQMX+CMMI10 findfont ct_VMDictPut/DQJMPZ+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l 3{/.notdef}rp /p /.notdef /r 141{/.notdef}rp]DQJMPZ+CMMI10 nfDQJMPZ+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf234.65 143.203 mo(pre)[6.01471 5.72772 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: OUKRMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OUKRMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQA+CMR10 /OUKRMX+CMR10 findfont ct_VMDictPut/DQJMQA+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMQA+CMR10 nfDQJMQA+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf251.958 143.203 mo(\()shDQJMPZ+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf256.607 143.203 mo(a,r)[6.31955 5.31528 0 ]xshDQJMQA+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf273.966 143.203 mo(\))shtrue set_gvm
%ADOBeginSubsetFont: OBEQMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OBEQMX+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /logicalor putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/logicalor <1C60D8A8C9B08A944AAF3A41AE50C6C8BDDBCE4FE58AA04FACD89908B9FF07CEE6CAA6423752FEB844C7B04CAD6CF186F11AB9FCC17ECEACE5B25D5D42FA0ECD436943FCFA87ADA5923F3249DFC2A0F11F87EFCF2736117C6F26564A39421532B6D9B9> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQB+CMSY10 /OBEQMX+CMSY10 findfont ct_VMDictPut/DQJMQB+CMSY10*1 [127{/.notdef}rp /logicalor 128{/.notdef}rp]DQJMQB+CMSY10 nfDQJMQB+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf281.271 143.203 mo(\177)shDQJMPZ+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf291.897 143.203 mo(del)[6.22269 5.56516 0 ]xshDQJMQA+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf307.489 143.203 mo(\()shDQJMPZ+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf312.139 143.203 mo(a,p)[6.31955 5.31525 0 ]xshDQJMQA+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf329.786 143.203 mo(\))shgrestore
gsave
197.871 82.8426 mo
239.871 82.8426 li
239.871 69.8426 li
197.871 69.8426 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: LNKBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LNKBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 100 /d putdup 101 /e putdup 108 /l putdup 112 /p putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQC+CMMI10 /LNKBAA+CMMI10 findfont ct_VMDictPut/DQJMQC+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l 3{/.notdef}rp /p 143{/.notdef}rp]DQJMQC+CMMI10 nfDQJMQC+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf197.939 79.05 mo(del)[6.22269 5.56516 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: VKKQMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /VKKQMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQD+CMR10 /VKKQMX+CMR10 findfont ct_VMDictPut/DQJMQD+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMQD+CMR10 nfDQJMQD+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf213.531 79.05 mo(\()shDQJMQC+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf218.181 79.05 mo(a,p)[6.31955 5.31528 0 ]xshDQJMQD+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf235.828 79.05 mo(\))shgrestore
gsave
382.92 113.941 mo
422.92 113.941 li
422.92 100.941 li
382.92 100.941 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: FJKBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FJKBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 98 /b putdup 100 /d putdup 101 /e putdup 108 /l putdup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/b <1C60D8A8C9B08A95BBD9F75FAAAC6725EBDCAC9D0E4CF99CBA1559718196008694689E6F374C9540E67333E03F824C537873F84BDA01B62BF826F3241BD121CAD0F428FF7A109B80999B8FE484BA481D85F260830F482F0B8938392EAE63AE26CA3E134612DC8C455DFAB4774508C33E68F493FE87F544BE241BF716628A807D773A513E03E3CFA01607F5CA395111CE7D8187466D1A20858974FE2323345665A7FA> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQE+CMMI10 /FJKBAA+CMMI10 findfont ct_VMDictPut/DQJMQE+CMMI10*1 [44{/.notdef}rp /comma 53{/.notdef}rp /b /.notdef /d /e 6{/.notdef}rp /l 4{/.notdef}rp /q 142{/.notdef}rp]DQJMQE+CMMI10 nfDQJMQE+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf382.507 110.148 mo(del)[6.22269 5.56516 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: QWQBAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /QWQBAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQF+CMR10 /QWQBAA+CMR10 findfont ct_VMDictPut/DQJMQF+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMQF+CMR10 nfDQJMQF+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf398.098 110.148 mo(\()shDQJMQE+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf402.748 110.148 mo(b,q)[5.13116 5.32239 0 ]xshDQJMQF+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf418.958 110.148 mo(\))shgrestore
gsave
517.536 147.517 mo
736.536 147.517 li
736.536 134.517 li
517.536 134.517 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: NIJAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NIJAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 108 /l putdup 112 /p putdup 113 /q putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings11 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/b <1C60D8A8C9B08A95BBD9F75FAAAC6725EBDCAC9D0E4CF99CBA1559718196008694689E6F374C9540E67333E03F824C537873F84BDA01B62BF826F3241BD121CAD0F428FF7A109B80999B8FE484BA481D85F260830F482F0B8938392EAE63AE26CA3E134612DC8C455DFAB4774508C33E68F493FE87F544BE241BF716628A807D773A513E03E3CFA01607F5CA395111CE7D8187466D1A20858974FE2323345665A7FA> |-/c <1C60D8A8C9B08A95B5AA7B9DB64BC1BCD29C945367C2D35F9DC1FB07DAB0F2D1A922F5449640E1DC5453210CEDF64FB94F63F7BA27366FF0D3323C10491F09DE369A3C14EA4D39E07D3215EBFA61B4D9CDC8B3AE4170A310895A31B932FCF319F8AC86B6E7561C1C081E221CCD3C1C8666331CAAAD3265CE280A6689E8EFE90FBE736DA18F81> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQG+CMMI10 /NIJAAA+CMMI10 findfont ct_VMDictPut/DQJMQG+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a /b /c /d /e 6{/.notdef}rp /l 3{/.notdef}rp /p /q /r 141{/.notdef}rp]DQJMQG+CMMI10 nfDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf518.068 143.725 mo(pre)[6.01471 5.72772 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: QLKRMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /QLKRMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQH+CMR10 /QLKRMX+CMR10 findfont ct_VMDictPut/DQJMQH+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMQH+CMR10 nfDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf535.376 143.725 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf540.025 143.725 mo(a,r)[6.31952 5.31525 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf557.384 143.725 mo(\))shtrue set_gvm
%ADOBeginSubsetFont: XJWAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /XJWAAA+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0351 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /logicaland putdup 127 /logicalor putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/logicaland <1C60D8A8C9B08A944AAF3A41AE50C6C8BDDBCE4FE58AA04FACD76D23AD8DB2D0DBC09CD2B63EBA6F2831D9CA8CFC70255B727EA638B0455CF16D6EF887DCF79F55F32E313D85ADC7373B361EB29EDD2E23D48071F62C14C6AFECA018F0B8933842DF72> |-/logicalor <1C60D8A8C9B08A944AAF3A41AE50C6C8BDDBCE4FE58AA04FACD89908B9FF07CEE6CAA6423752FEB844C7B04CAD6CF186F11AB9FCC17ECEACE5B25D5D42FA0ECD436943FCFA87ADA5923F3249DFC2A0F11F87EFCF2736117C6F26564A39421532B6D9B9> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQI+CMSY10 /XJWAAA+CMSY10 findfont ct_VMDictPut/DQJMQI+CMSY10*1 [32{/.notdef}rp /logicaland 94{/.notdef}rp /logicalor 128{/.notdef}rp]DQJMQI+CMSY10 nfDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf564.69 143.725 mo(\177)shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf575.317 143.725 mo(del)[6.22266 5.56519 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf590.909 143.725 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf595.557 143.725 mo(a,p)[6.31958 5.31525 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf613.205 143.725 mo(\))shDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf620.511 143.725 mo(\177)shDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf631.137 143.725 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf635.787 143.725 mo(del)[6.22272 5.56512 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf651.379 143.725 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf656.028 143.725 mo(b,q)[5.13116 5.32245 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf672.237 143.725 mo(\))shDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf679.544 143.725 mo( )shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf690.17 143.725 mo(pre)[6.01471 5.72772 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf707.478 143.725 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf712.127 143.725 mo(c,q)[5.17413 5.31763 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf728.379 143.725 mo(\)\))[4.64948 0 ]xshgrestore
gsave
33.3271 62.3112 mo
55.3271 62.3112 li
55.3271 46.3112 li
33.3271 46.3112 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: TFKAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TFKAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 112 /p putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQJ+CMMI10 /TFKAAA+CMMI10 findfont ct_VMDictPut/DQJMQJ+CMMI10*1 [112{/.notdef}rp /p 143{/.notdef}rp]DQJMQJ+CMMI10 nfDQJMQJ+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf34.4791 57.4655 mo(p)shtrue set_gvm
%ADOBeginSubsetFont: UPXQMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /UPXQMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B117D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2EBEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AEB3E78ECCEF035CFEC> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQK+CMR7 /UPXQMX+CMR7 findfont ct_VMDictPut/DQJMQK+CMR7*1 [48{/.notdef}rp /zero 207{/.notdef}rp]DQJMQK+CMR7 nfDQJMQK+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf46.5104 61.0533 mo(0)shgrestore
gsave
34.8271 104.126 mo
53.8271 104.126 li
53.8271 88.1258 li
34.8271 88.1258 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: KBTAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KBTAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQL+CMMI10 /KBTAAA+CMMI10 findfont ct_VMDictPut/DQJMQL+CMMI10*1 [113{/.notdef}rp /q 142{/.notdef}rp]DQJMQL+CMMI10 nfDQJMQL+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf34.2584 99.2804 mo(q)shtrue set_gvm
%ADOBeginSubsetFont: VIZAAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /VIZAAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B117D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2EBEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AEB3E78ECCEF035CFEC> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQM+CMR7 /VIZAAA+CMR7 findfont ct_VMDictPut/DQJMQM+CMR7*1 [48{/.notdef}rp /zero 207{/.notdef}rp]DQJMQM+CMR7 nfDQJMQM+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf44.9312 102.868 mo(0)shgrestore
gsave
39.8917 161.348 mo
58.8917 161.348 li
58.8917 146.348 li
39.8917 146.348 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: BFFAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BFFAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQN+CMMI10 /BFFAAA+CMMI10 findfont ct_VMDictPut/DQJMQN+CMMI10*1 [114{/.notdef}rp /r 141{/.notdef}rp]DQJMQN+CMMI10 nfDQJMQN+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf39.2653 157.194 mo(r)shtrue set_gvm
%ADOBeginSubsetFont: NMZPMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NMZPMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B117D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2EBEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AEB3E78ECCEF035CFEC> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQO+CMR7 /NMZPMX+CMR7 findfont ct_VMDictPut/DQJMQO+CMR7*1 [48{/.notdef}rp /zero 207{/.notdef}rp]DQJMQO+CMR7 nfDQJMQO+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf50.0533 160.782 mo(0)shgrestore
gsave
216.341 168.093 mo
235.341 168.093 li
235.341 153.093 li
216.341 153.093 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: VLHQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /VLHQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQP+CMMI10 /VLHQMX+CMMI10 findfont ct_VMDictPut/DQJMQP+CMMI10*1 [114{/.notdef}rp /r 141{/.notdef}rp]DQJMQP+CMMI10 nfDQJMQP+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf215.714 164.284 mo(r)shtrue set_gvm
%ADOBeginSubsetFont: FZFAAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FZFAAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D4582A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101B8> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQQ+CMR7 /FZFAAA+CMR7 findfont ct_VMDictPut/DQJMQQ+CMR7*1 [49{/.notdef}rp /one 206{/.notdef}rp]DQJMQQ+CMR7 nfDQJMQQ+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf226.503 167.872 mo(1)shgrestore
gsave
404.107 165.816 mo
423.107 165.816 li
423.107 150.816 li
404.107 150.816 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: YLHRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /YLHRMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQR+CMMI10 /YLHRMX+CMMI10 findfont ct_VMDictPut/DQJMQR+CMMI10*1 [114{/.notdef}rp /r 141{/.notdef}rp]DQJMQR+CMMI10 nfDQJMQR+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf403.48 162.007 mo(r)shtrue set_gvm
%ADOBeginSubsetFont: WKZAAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /WKZAAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E3972B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA7C3147D75D44707368> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQS+CMR7 /WKZAAA+CMR7 findfont ct_VMDictPut/DQJMQS+CMR7*1 [50{/.notdef}rp /two 205{/.notdef}rp]DQJMQS+CMR7 nfDQJMQS+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf414.269 165.595 mo(2)shgrestore
gsave
657.399 169.541 mo
676.399 169.541 li
676.399 154.541 li
657.399 154.541 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: FVQBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FVQBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQT+CMMI10 /FVQBAA+CMMI10 findfont ct_VMDictPut/DQJMQT+CMMI10*1 [114{/.notdef}rp /r 141{/.notdef}rp]DQJMQT+CMMI10 nfDQJMQT+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf656.773 165.386 mo(r)shtrue set_gvm
%ADOBeginSubsetFont: MSAQMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MSAQMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 51 /three putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/three <1C60D8A8C9B08A95C25148D4A67F69EFB9DDFA5ECA5AE37566D87066172F8CABE2B2CB84CA762EB5E603C8A9A699CCCFA6A0578E3DA76E6C9E7B5A8445F01D818A380DD4AC46AFDB5422B8800FEF2E8AFDA86EDD8199C34D64992E4F43992CF1D54B07E3F575480A9A0B868375A4E2A9893BE0AEBB713690AB6C5B93E6D8D619357F90F56F58A8525CC0A1BD91DA9365507B440F549B60D4E7E5CBB3769D4C82F061F9E20A25AD23418551374D804A6B25C8CE003D> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQU+CMR7 /MSAQMX+CMR7 findfont ct_VMDictPut/DQJMQU+CMR7*1 [51{/.notdef}rp /three 204{/.notdef}rp]DQJMQU+CMR7 nfDQJMQU+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf667.561 168.974 mo(3)shgrestore
gsave
214.891 66.2521 mo
236.891 66.2521 li
236.891 50.2521 li
214.891 50.2521 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: WLWQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /WLWQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 112 /p putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQV+CMMI10 /WLWQMX+CMMI10 findfont ct_VMDictPut/DQJMQV+CMMI10*1 [112{/.notdef}rp /p 143{/.notdef}rp]DQJMQV+CMMI10 nfDQJMQV+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf216.043 61.4065 mo(p)shtrue set_gvm
%ADOBeginSubsetFont: KJWPMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KJWPMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D4582A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101B8> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQW+CMR7 /KJWPMX+CMR7 findfont ct_VMDictPut/DQJMQW+CMR7*1 [49{/.notdef}rp /one 206{/.notdef}rp]DQJMQW+CMR7 nfDQJMQW+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf228.074 64.9944 mo(1)shgrestore
gsave
389.306 65.5388 mo
411.306 65.5388 li
411.306 49.5388 li
389.306 49.5388 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: VGJQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /VGJQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 112 /p putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQX+CMMI10 /VGJQMX+CMMI10 findfont ct_VMDictPut/DQJMQX+CMMI10*1 [112{/.notdef}rp /p 143{/.notdef}rp]DQJMQX+CMMI10 nfDQJMQX+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf390.458 60.6935 mo(p)shtrue set_gvm
%ADOBeginSubsetFont: IFCBAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /IFCBAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E3972B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA7C3147D75D44707368> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQY+CMR7 /IFCBAA+CMR7 findfont ct_VMDictPut/DQJMQY+CMR7*1 [50{/.notdef}rp /two 205{/.notdef}rp]DQJMQY+CMR7 nfDQJMQY+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf402.489 64.2814 mo(2)shgrestore
gsave
649.459 73.8396 mo
671.459 73.8396 li
671.459 57.8396 li
649.459 57.8396 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: YKVPMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /YKVPMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 112 /p putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMQZ+CMMI10 /YKVPMX+CMMI10 findfont ct_VMDictPut/DQJMQZ+CMMI10*1 [112{/.notdef}rp /p 143{/.notdef}rp]DQJMQZ+CMMI10 nfDQJMQZ+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf650.612 68.9945 mo(p)shtrue set_gvm
%ADOBeginSubsetFont: BDHQMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /BDHQMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 51 /three putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/three <1C60D8A8C9B08A95C25148D4A67F69EFB9DDFA5ECA5AE37566D87066172F8CABE2B2CB84CA762EB5E603C8A9A699CCCFA6A0578E3DA76E6C9E7B5A8445F01D818A380DD4AC46AFDB5422B8800FEF2E8AFDA86EDD8199C34D64992E4F43992CF1D54B07E3F575480A9A0B868375A4E2A9893BE0AEBB713690AB6C5B93E6D8D619357F90F56F58A8525CC0A1BD91DA9365507B440F549B60D4E7E5CBB3769D4C82F061F9E20A25AD23418551374D804A6B25C8CE003D> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRA+CMR7 /BDHQMX+CMR7 findfont ct_VMDictPut/DQJMRA+CMR7*1 [51{/.notdef}rp /three 204{/.notdef}rp]DQJMRA+CMR7 nfDQJMRA+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf662.643 72.5824 mo(3)shgrestore
gsave
219.871 101.818 mo
238.871 101.818 li
238.871 85.818 li
219.871 85.818 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: QSJBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /QSJBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRB+CMMI10 /QSJBAA+CMMI10 findfont ct_VMDictPut/DQJMRB+CMMI10*1 [113{/.notdef}rp /q 142{/.notdef}rp]DQJMRB+CMMI10 nfDQJMRB+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf219.302 96.9724 mo(q)shtrue set_gvm
%ADOBeginSubsetFont: DVBAAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DVBAAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D4582A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101B8> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRC+CMR7 /DVBAAA+CMR7 findfont ct_VMDictPut/DQJMRC+CMR7*1 [49{/.notdef}rp /one 206{/.notdef}rp]DQJMRC+CMR7 nfDQJMRC+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf229.975 100.56 mo(1)shgrestore
gsave
396.536 100.263 mo
415.536 100.263 li
415.536 84.2628 li
396.536 84.2628 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: INMBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /INMBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRD+CMMI10 /INMBAA+CMMI10 findfont ct_VMDictPut/DQJMRD+CMMI10*1 [113{/.notdef}rp /q 142{/.notdef}rp]DQJMRD+CMMI10 nfDQJMRD+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf395.967 95.4175 mo(q)shtrue set_gvm
%ADOBeginSubsetFont: KWYPMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KWYPMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E3972B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA7C3147D75D44707368> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRE+CMR7 /KWYPMX+CMR7 findfont ct_VMDictPut/DQJMRE+CMR7*1 [50{/.notdef}rp /two 205{/.notdef}rp]DQJMRE+CMR7 nfDQJMRE+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf406.64 99.0054 mo(2)shgrestore
gsave
651.459 101.818 mo
670.459 101.818 li
670.459 85.818 li
651.459 85.818 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: QDNAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /QDNAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CBE24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B235060184BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE576696076477DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED526AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRF+CMMI10 /QDNAAA+CMMI10 findfont ct_VMDictPut/DQJMRF+CMMI10*1 [113{/.notdef}rp /q 142{/.notdef}rp]DQJMRF+CMMI10 nfDQJMRF+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf650.891 96.9724 mo(q)shtrue set_gvm
%ADOBeginSubsetFont: AFDRMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /AFDRMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 51 /three putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/three <1C60D8A8C9B08A95C25148D4A67F69EFB9DDFA5ECA5AE37566D87066172F8CABE2B2CB84CA762EB5E603C8A9A699CCCFA6A0578E3DA76E6C9E7B5A8445F01D818A380DD4AC46AFDB5422B8800FEF2E8AFDA86EDD8199C34D64992E4F43992CF1D54B07E3F575480A9A0B868375A4E2A9893BE0AEBB713690AB6C5B93E6D8D619357F90F56F58A8525CC0A1BD91DA9365507B440F549B60D4E7E5CBB3769D4C82F061F9E20A25AD23418551374D804A6B25C8CE003D> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRG+CMR7 /AFDRMX+CMR7 findfont ct_VMDictPut/DQJMRG+CMR7*1 [51{/.notdef}rp /three 204{/.notdef}rp]DQJMRG+CMR7 nfDQJMRG+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf661.564 100.56 mo(3)shgrestore
gsave
105.105 128.321 mo
127.105 128.321 li
127.105 113.321 li
105.105 113.321 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: JWEQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JWEQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 97 /a putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRH+CMMI10 /JWEQMX+CMMI10 findfont ct_VMDictPut/DQJMRH+CMMI10*1 [97{/.notdef}rp /a 158{/.notdef}rp]DQJMRH+CMMI10 nfDQJMRH+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf104.955 124.167 mo(a)shtrue set_gvm
%ADOBeginSubsetFont: UJRAAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /UJRAAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B117D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2EBEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AEB3E78ECCEF035CFEC> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRI+CMR7 /UJRAAA+CMR7 findfont ct_VMDictPut/DQJMRI+CMR7*1 [48{/.notdef}rp /zero 207{/.notdef}rp]DQJMRI+CMR7 nfDQJMRI+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf117.594 127.754 mo(0)shgrestore
gsave
288.766 129.001 mo
306.766 129.001 li
306.766 108.001 li
288.766 108.001 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: CFIBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CFIBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 98 /b putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/b <1C60D8A8C9B08A95BBD9F75FAAAC6725EBDCAC9D0E4CF99CBA1559718196008694689E6F374C9540E67333E03F824C537873F84BDA01B62BF826F3241BD121CAD0F428FF7A109B80999B8FE484BA481D85F260830F482F0B8938392EAE63AE26CA3E134612DC8C455DFAB4774508C33E68F493FE87F544BE241BF716628A807D773A513E03E3CFA01607F5CA395111CE7D8187466D1A20858974FE2323345665A7FA> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRJ+CMMI10 /CFIBAA+CMMI10 findfont ct_VMDictPut/DQJMRJ+CMMI10*1 [98{/.notdef}rp /b 157{/.notdef}rp]DQJMRJ+CMMI10 nfDQJMRJ+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf288.404 124.993 mo(b)shtrue set_gvm
%ADOBeginSubsetFont: HMKBAA+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /HMKBAA+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D4582A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101B8> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRK+CMR7 /HMKBAA+CMR7 findfont ct_VMDictPut/DQJMRK+CMR7*1 [49{/.notdef}rp /one 206{/.notdef}rp]DQJMRK+CMR7 nfDQJMRK+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf298.664 128.581 mo(1)shgrestore
gsave
534.195 125.243 mo
553.195 125.243 li
553.195 110.243 li
534.195 110.243 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: DJKRMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DJKRMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 99 /c putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/c <1C60D8A8C9B08A95B5AA7B9DB64BC1BCD29C945367C2D35F9DC1FB07DAB0F2D1A922F5449640E1DC5453210CEDF64FB94F63F7BA27366FF0D3323C10491F09DE369A3C14EA4D39E07D3215EBFA61B4D9CDC8B3AE4170A310895A31B932FCF319F8AC86B6E7561C1C081E221CCD3C1C8666331CAAAD3265CE280A6689E8EFE90FBE736DA18F81> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRL+CMMI10 /DJKRMX+CMMI10 findfont ct_VMDictPut/DQJMRL+CMMI10*1 [99{/.notdef}rp /c 156{/.notdef}rp]DQJMRL+CMMI10 nfDQJMRL+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf533.79 121.434 mo(c)shtrue set_gvm
%ADOBeginSubsetFont: FVQPMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FVQPMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B08A95C25148D4A67F955E56DED8709BEAC975B0F2E8A32A514F6D9222A5E47F7F9AE809FC929439005D711A5946815CD69262A805D0F899C8EBB5027F0DDD5B81DF529E7E3811173669493CAEFC29805ADB063CD3E32E3972B91F3A4784DBF342B608A84378E8760E2174C16BC88D5442E7B57E279222AA7C3147D75D44707368> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRM+CMR7 /FVQPMX+CMR7 findfont ct_VMDictPut/DQJMRM+CMR7*1 [50{/.notdef}rp /two 205{/.notdef}rp]DQJMRM+CMR7 nfDQJMRM+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf544.136 125.022 mo(2)shgrestore
gsave
564.971 186.578 mo
740.971 186.578 li
740.971 173.578 li
564.971 173.578 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: CBJBAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CBJBAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 97 /a putdup 100 /d putdup 101 /e putdup 108 /l putdup 112 /p putdup 114 /r putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1CEF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D6991493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-/a <1C60D8A8C9B08A95D27357321AC68CEEC834EC94D10EA3E78C37F9CA967F2C3C0CE3F4AAC8CEF9F48BC919C19C69094C93F55CF225D61860BBDD6553C380E1A911EE75AB89109A9DF563A415F24615D0C2C5938CA50480EC293B36A2D91F727504C416CD25B55F20D9B74D69868510E01CD9AA1B335A35DF53DC50CC435611573A9BF14DA860A1DE4C254DC6E9DAB1886C231648E231EEBE7427D100E50AABDBA1CF9803AD6328411DC36A431D831F7FBFF65D3C2C5699B8C09149EDB2D575955E19E6> |-/d <1C60D8A8C9B08A95D7418482512402940A06B73B081E5831CAA175C688E60D2F91EFC6F64C11086892B8E7FEFF39C72D470E38E9B769217DF150C981B3B3C27909577E8D07A74154AC10F194A7D7E2C445EF8A41371E4A139FC5C912503A678191CB04FB4936EB841D0A422D01391CD946C5EDEB37C527E0C3A15C75BA205DC657D7D99C93A5DFD54D6EB01708A973321EAE4A396D11CC40FCD62DEA1080AD6933066C4543751A82F384644FAB1378AD8394BA39AADFA64FA2B37B78BEB3C4BA1FE6EECE6688BAAD9B> |-/e <1C60D8A8C9B08A95A91AD57C418F1B8A6528837DCD758E27113E8EFB3EC83781EDC214726C0EB7B435F59FC11DE03978587E288AEAC786B7295F6B3BE9246D4C7AA41C5437B16E6A31CDE1AA88BC9C697DE2E1422A6B60D2EC193740CA8208290F00B18144195EF5223F5DE6488C43E03A52FD4265A64DB76664A1BC48A47DDF599EB732> |-/l <1C60D8A8C9B08A956801335D6A39D628F1EAA534AD8574CFD28FB6C1D7EB8864A7D9194CAFE1F78A4C0C9591B34BDE075F4F4EEA9B58BD38BF321F1B0025093D79AF34955D36FC1D8AC9CE4433727C7876138E47C6B000844E4FA55F11C5A44248BB60C93FDC2D9881E17F1EA5261EBD6DB44D67C8CE6F247962663344> |-/p <1C60D8A8C9B08A95D8561BC729D9A3B729DB0326CCBF498543E39D3B0098BD0EB39EAB2A31197F37571CABBE6A9FA39BD3EF0CC6D7FA751DC953AD0D03650F2C474BFFCD2D20E154BF4866BBD1005EEBE3F7FF3654E14EAAB8A6D09FE7020A7453E7D05FD831B22A3F71B5DCAA4D18FF0870E7BA59BA5117849486C6A467004A7FB82CDD7F3F4E5FE2E452EE5D8FDF507A905E79235B7E253A4355BC975AD097C3FB0F1E4E4F8A8379E40904593D1893AB910D45B5F5485CA5690F216D8FEBDA4E0AFA831E08F8AF445E77C716B8E2657F822A386037DC2460E9ED> |-/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB8673471296547AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED030CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573ECE214AA6784C481420B569D> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRN+CMMI10 /CBJBAA+CMMI10 findfont ct_VMDictPut/DQJMRN+CMMI10*1 [44{/.notdef}rp /comma 52{/.notdef}rp /a 2{/.notdef}rp /d /e 6{/.notdef}rp /l 3{/.notdef}rp /p /.notdef /r 141{/.notdef}rp]DQJMRN+CMMI10 nfDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf565.629 182.785 mo(pre)[6.01471 5.72778 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: PGFRMX+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /PGFRMX+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdef/FontBBox {-251 -250 1009 969} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 448 666 677] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F055B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDEC0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA922C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBADB3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRO+CMR10 /PGFRMX+CMR10 findfont ct_VMDictPut/DQJMRO+CMR10*1 [40{/.notdef}rp /parenleft /parenright 214{/.notdef}rp]DQJMRO+CMR10 nfDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf582.937 182.785 mo(\()shDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf587.587 182.785 mo(a,r)[6.31952 5.31525 0 ]xshDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf604.945 182.785 mo(\))shtrue set_gvm
%ADOBeginSubsetFont: FUUQMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FUUQMX+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /logicaland putdup 127 /logicalor putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/logicaland <1C60D8A8C9B64EDF769BF0314EE0CE1210B4AD5DC4C392D5CC500CBC0D2E06F5BF39BBBB19F8FD3BED83AA7D8B5EEFC22DD4AD377D96F603DAF5C5519020C41C9A686EFE9C2064941A3134F5F60B4D45FE717B345966EA466845527351> |-/logicalor <1C60D8A8C9B64EDF769BF0314EE0CE1210B4AD52A433FB96A121A41A9EEDECB63D2D14C3EF4DEC5A3F70CDCDC75CDAD7110EE7DE99357F5484756BDE5E7D3E6A34583D8F252703625296942B36FC8BB36F1F22E6C517BC0C793F36FFA1> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRP+CMSY10 /FUUQMX+CMSY10 findfont ct_VMDictPut/DQJMRP+CMSY10*1 [32{/.notdef}rp /logicaland 94{/.notdef}rp /logicalor 128{/.notdef}rp]DQJMRP+CMSY10 nfDQJMRP+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf612.25 182.785 mo(\177)shDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf622.878 182.785 mo(\()shDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf627.526 182.785 mo(del)[6.22272 5.56519 0 ]xshDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf643.118 182.785 mo(\()shDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf647.768 182.785 mo(a,p)[6.31958 5.31525 0 ]xshDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf665.415 182.785 mo(\))shDQJMRP+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf672.721 182.785 mo( )shtrue set_gvm
%ADOBeginSubsetFont: OUGQMX+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /OUGQMX+CMSY10 def/FontInfo 6 dict dup begin/Weight (SnapShot) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 127 /logicalnot putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705] def/OtherBlues [-124 -119] def/BlueScale 0.0437929 def/StdHW [40] def/StdVW [85] def/StemSnapH [40 55] def/StemSnapV [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/logicalnot <1C60D8A8C9B64EDFE7FAB5B9993E84A54A8A7935D1C533F79578AA86B9C425B37DDE42F51CE37E772969D4DDF09E3757650D431802387EB08C436C21> |-/.notdef <1C60D8A8C9C4A637> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRQ+CMSY10 /OUGQMX+CMSY10 findfont ct_VMDictPut/DQJMRQ+CMSY10*1 [127{/.notdef}rp /logicalnot 128{/.notdef}rp]DQJMRQ+CMSY10 nfDQJMRQ+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf683.345 182.785 mo(\177)shDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf691.318 182.785 mo(add)[6.31952 6.22394 0 ]xshDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf710.083 182.785 mo(\()shDQJMRN+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf714.732 182.785 mo(a,r)[6.31958 5.31525 0 ]xshDQJMRO+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf732.09 182.785 mo(\)\))[4.64941 0 ]xshgrestore
gsave
632.471 48.2805 mo
851.471 48.2805 li
851.471 35.2805 li
632.471 35.2805 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
DQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf633.004 44.4879 mo(pre)[6.01465 5.72778 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf650.311 44.4879 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf654.96 44.4879 mo(a,r)[6.31958 5.31525 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf672.319 44.4879 mo(\))shDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf679.625 44.4879 mo(\177)shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf690.252 44.4879 mo(del)[6.22272 5.56512 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf705.844 44.4879 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf710.493 44.4879 mo(a,p)[6.31958 5.31525 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf728.14 44.4879 mo(\))shDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf735.447 44.4879 mo(\177)shDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf746.073 44.4879 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf750.723 44.4879 mo(del)[6.22266 5.56519 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf766.314 44.4879 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf770.963 44.4879 mo(b,q)[5.13116 5.32239 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf787.173 44.4879 mo(\))shDQJMQI+CMSY10*1 [11.9551 0 0 -11.9551 0 0 ]msf794.479 44.4879 mo( )shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf805.106 44.4879 mo(pre)[6.01465 5.72778 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf822.413 44.4879 mo(\()shDQJMQG+CMMI10*1 [11.9551 0 0 -11.9551 0 0 ]msf827.062 44.4879 mo(c,q)[5.17419 5.31763 0 ]xshDQJMQH+CMR10*1 [11.9551 0 0 -11.9551 0 0 ]msf843.315 44.4879 mo(\)\))[4.64941 0 ]xshgrestore
gsave
649.643 27.9496 mo
670.643 27.9496 li
670.643 11.9496 li
649.643 11.9496 li
cp
clp
false sop
<< /CSA /2 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.74902 0.678431 0.670588 0.894118 colr
true set_gvm
%ADOBeginSubsetFont: NBWQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NBWQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 103 /g putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 683 705 431 442 453 466] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/g <1C60D8A8C9B08A95A6DFABA3A89D8057D81C75F47C175B418998D6F1C81F4B118311E834B35785849EA346887FD8AF2876FAB98D057563E5D0BDDFEF60219E9907AF7D16AF30B4A6EEC3FCA669E7846E0354995B4CF6BED99B9C0E295C0B2217E35DC5839B4C376DA9A896CBAD12A1BB2ED56D3F4CE2368998AFCB2329C625A3A0BC0222385672C35FBDC348FA38DFD9338062228622784362A1327E1DD810704A3BE07353A5CC697632493B8AD25C5841A319B5A76329B6D5A20BAD40C122> |-/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRR+CMMI10 /NBWQMX+CMMI10 findfont ct_VMDictPut/DQJMRR+CMMI10*1 [103{/.notdef}rp /g 152{/.notdef}rp]DQJMRR+CMMI10 nfDQJMRR+CMMI10*1 [23.9102 0 0 -23.9102 0 0 ]msf650.11 22.8455 mo(g)shtrue set_gvm
%ADOBeginSubsetFont: IFSQMX+CMR7 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2011 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /IFSQMX+CMR7 def/FontInfo 7 dict dup begin/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 51 /three putdef/FontBBox {-27 -250 1122 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0 683 703 431 446 664 674] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [36] def/StdVW [79] def/StemSnapH [28 36] def/StemSnapV [79 95] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/three <1C60D8A8C9B08A95C25148D4A67F69EFB9DDFA5ECA5AE37566D87066172F8CABE2B2CB84CA762EB5E603C8A9A699CCCFA6A0578E3DA76E6C9E7B5A8445F01D818A380DD4AC46AFDB5422B8800FEF2E8AFDA86EDD8199C34D64992E4F43992CF1D54B07E3F575480A9A0B868375A4E2A9893BE0AEBB713690AB6C5B93E6D8D619357F90F56F58A8525CC0A1BD91DA9365507B440F549B60D4E7E5CBB3769D4C82F061F9E20A25AD23418551374D804A6B25C8CE003D> |-/.notdef <1C60D8A8C9B08A958AA685092D4752> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/DQJMRS+CMR7 /IFSQMX+CMR7 findfont ct_VMDictPut/DQJMRS+CMR7*1 [51{/.notdef}rp /three 204{/.notdef}rp]DQJMRS+CMR7 nfDQJMRS+CMR7*1 [16.7371 0 0 -16.7371 0 0 ]msf661.515 26.4333 mo(3)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
